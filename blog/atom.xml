<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://algodema.com/blog</id>
    <title>algodema Blog</title>
    <updated>2021-10-17T12:49:31.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://algodema.com/blog"/>
    <subtitle>algodema Blog</subtitle>
    <icon>https://algodema.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Software Architecture: The Logical View]]></title>
        <id>https://algodema.com/blog/software-architecture-logical-view</id>
        <link href="https://algodema.com/blog/software-architecture-logical-view"/>
        <updated>2021-10-17T12:49:31.000Z</updated>
        <summary type="html"><![CDATA[author]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/logical-view-6cc2a6673c829dc04e742c8844b1a00a.jpeg" width="2000" height="1250" class="img_ev3q">
<a href="https://dz2cdn1.dzone.com/storage/article-thumb/8685724-thumb.jpg" target="_blank" rel="noopener noreferrer">photo source</a></p>
<p><img decoding="async" loading="lazy" alt="The 1+4 Model View" src="https://algodema.com/assets/images/1plus4model-logical-view-3636354c22277d70aec68c9aad98b367.png" width="1280" height="634" class="img_ev3q">
<em>The 4+1 view model describes an application’s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests</em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-layered-architecture-style">The layered architecture style<a href="https://algodema.com/blog/software-architecture-logical-view#the-layered-architecture-style" class="hash-link" aria-label="Direct link to The layered architecture style" title="Direct link to The layered architecture style">​</a></h2>
<p>This is my first architecture style I've discovered 10 years ago thanks to my java enterprise application course teacher, Ths idea
consist of organizing the elements of an application into layers. Those elements could be java classes grouped by the responsibility type
they manage and respect the rule that each layer should depend only on the layer below it, Another version also tolerate that a layer can
depends on the any of the layers below it.</p>
<p>Even though we can apply this architecture style to any of the 4 model view we've seen above, It is most likely to be used in the logical view
as follows:</p>
<ul>
<li><strong>Presentation layer</strong>: groups classes &amp; interfaces that handle the UI interactions, Such as desktop application UI that handles user interactions like Click, Press, etc...</li>
<li><strong>Business logic layer</strong>: contains classes where we implement the business logic of the system. For example classes that calculate the shortest route for delivering merchandise from stock house to customer.</li>
<li><strong>Persistence layer</strong>: contains interfaces and classes that interact with database or file system. For example classes that communicate with a MySQL database.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="3 Tier Java Application Architecture" src="https://algodema.com/assets/images/n-tier-architecture-style-java-599c1deef248b1d2cc822794932fc698.jpg" width="3168" height="1262" class="img_ev3q">
<i>In the above figure, we illustrate the 3 tier architecture for a java application, classes of the same layer are grouped using packages.Note that architecture is beyond
any programming language, so for example in case of a C# application we group classes in namespaces instead of packages for java.</i></p>
<p>The years go by and the software development community began to recognize some drawbacks of N Tier architecture, below we list some of them:</p>
<ul>
<li><strong>Single Presentation Layer</strong>: With the evolution of the web and mobile applications, many systems provide the same functions, For example a desktop application
for logistics providing the feature of calculating the shortest route and cost of a delivery, While the business logic remains the same,
the interactions with the system are evolving with mobile and web users.</li>
<li><strong>Single Persistence Layer</strong>: Modern systems needs to interact with many and/or different storage systems rather than one database.</li>
<li><strong>Layer dependencies</strong>: As the business logic depends on the persistence one, we are prevented from testing the business logic in an isolation.</li>
</ul>
<p>These disadvantages lead to an alternative architecture style we present next.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-hexagonal-architecture-style">The Hexagonal Architecture Style<a href="https://algodema.com/blog/software-architecture-logical-view#the-hexagonal-architecture-style" class="hash-link" aria-label="Direct link to The Hexagonal Architecture Style" title="Direct link to The Hexagonal Architecture Style">​</a></h2>
<p>This architecture style organizes the logical view in a way that puts the business logic at the center. In contrast to the layered
architecture that has a presentation layer, we have here one or more inbound adapters that handle requests from the outside by invoking
the business logic. The same applied to the persistence layer, the application has or more outbound adapters that are invoked by the business logic and invoke external applications.
The main characteristic of this architecture style is that the business logic doesn't depend on these adapters, instead they depend on it.
The Business logic has one or more ports.A <strong>port</strong> defines a set of operations and is how the business logic interacts with
what's outside it. For example in java these ports are a Java Interface. we distinguish inbound and outbound ports. An inbound port is an API exposed by
the business logic, which enables it to be invoked by external applications, for example a REST API.An outbound port is how the business
logic invokes external systems like Database Access Repositories.</p>
<p>Like the ports there are inbound and outbound adapters. An inbound adapter handles requests from the outside world
by invoking an inbound port. For example in the case of a Java Web Application using Spring framework, An inbound
adapter is a Rest Controller that will invoke inbound port exposed by the business logic.
An outbound adapter implements an outbound port and handles requests from the business logic by invoking an external
application or service.An example of an outbound adapter is an Event Publisher to Kafka or any other Event streaming system.</p>
<p><img decoding="async" loading="lazy" alt="Hexagonal Architecture" src="https://algodema.com/assets/images/hexagonal-architecture-a2755d762525908a8ce5960d5b3c9072.jpeg" width="590" height="463" class="img_ev3q"></p>
<p><em>The Figure above shows an example of the hexagonal architecture where the business logic has one or more adapters to communicate with external systems</em></p>
<p>Let me remind you that decoupling the business logic from the presentation and data access is the important benefit
of the hexagonal architecture style. This is very useful also when it comes to testing as you can use <abbr title="Test Driven Development"><strong>TDD</strong></abbr>
easily as you can test your business logic in an isolation.It also defines new model for the modern applications where the
business logic can be invoked by multiple adapters each one of them invokes an external system.</p>
<blockquote>
<p>The Hexagonal Architecture style is well fit to define the architecture of each service in a microservice architecture.</p>
</blockquote>
<p>Both the layered and hexagonal architectures are a set of constraints and rules on how elements within the logical
view are connected and how they communicate.</p>
<hr>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Software_architecture" target="_blank" rel="noopener noreferrer">Software Architecture Definition by Wikipedia</a></li>
<li><a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf" target="_blank" rel="noopener noreferrer">The “4+1” View Model of Software Architecture by Philippe Kruchten</a></li>
<li><a href="https://www.sei.cmu.edu/our-work/software-architecture/" target="_blank" rel="noopener noreferrer">Advancing the Practice of Software Architecture by Software Engineering Institute</a></li>
</ul>]]></content>
        <author>
            <name>Reda Jaifar</name>
            <uri>https://github.com/reda-jaifar</uri>
        </author>
        <category label="software" term="software"/>
        <category label="architecture" term="architecture"/>
        <category label="4+1" term="4+1"/>
        <category label="logical view" term="logical view"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[DevOps: Strengthen your digital transformation]]></title>
        <id>https://algodema.com/blog/devops-strengthen-your-digital-transformation</id>
        <link href="https://algodema.com/blog/devops-strengthen-your-digital-transformation"/>
        <updated>2021-07-10T10:49:31.000Z</updated>
        <summary type="html"><![CDATA[author]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/devops-strengthen-your-digital-transformation-c4c0816f7fd32fbaa78258882c301614.jpeg" width="1024" height="640" class="img_ev3q">
<a href="https://www.sdxcentral.com/cdn-cgi/image/w=748,h=399,fit=scale-down,f=auto,q=85/https://www.sdxcentral.com/wp-content/uploads/2018/10/Cloudera-Hortonworks-Merge-Their-Big-Data-Efforts.jpg" target="_blank" rel="noopener noreferrer">photo source</a></p>
<p>Nowadays the processes used to create software have been considerably evolved from manual and human interaction to test,
build and deploy an application to a fully automated process relying on new practices and tools that help teams to
deliver an update to production in few minutes or even seconds.
If your organization or team still using the old methods and have the willingness to take a step toward these useful
and helpful DevOps practices, there are some notions to consider while taking the way.</p>
<p>DevOps aims at merging or combining the software development and IT operations to accelerate software delivery while ensuring high quality and secure systems.
with the adoption of agility, a team could respond to customer requirements rapidly without suspending the production environment. I would like to sum up these concepts as follow:</p>
<ul>
<li>Development and operations teams are merged into one single team where all members contributing to make
the app ready to use, from dev, and test to deployment.</li>
<li>Product Owner and other functional roles are concerned by DevOps practices, they decide and act from feature
development to application production deployment. ​</li>
</ul>
<p>Before detailing the concepts and practices of DevOps, let's share some of the key benefits of either a company or an open community
developing a product can gain.</p>
<div class="row"><div class="column"><div class="card"><h3>Speed</h3><p class="card-content">Increase your velocity for faster innovation and market-changing responding by releasing updates quickly</p></div></div><div class="column"><div class="card"><h3>Delivery</h3><p class="card-content">Reducing the delivery time to provide customer with new features and fixing bugs quickly</p></div></div><div class="column"><div class="card"><h3>Security</h3><p class="card-content"></p><p>Respond and deliver quicker without losing control on quality and compliance, by including automated quality and security checking</p><p></p></div></div><div class="column"><div class="card"><h3>Reliability</h3><p class="card-content">Manage your development, test and production environment in a managed manner to test that every changes or updates is functional so the end user is always provided with a reliable product </p></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="devops-practices">DevOps practices<a href="https://algodema.com/blog/devops-strengthen-your-digital-transformation#devops-practices" class="hash-link" aria-label="Direct link to DevOps practices" title="Direct link to DevOps practices">​</a></h2>
<h1>Continuous Integration</h1>
<p>Today chances that software is writing by more than one person are higher contrary to the shining start of the Linux story who was
created first by Linus Torvalds as a personal project. To merge code writing by different members we use the continuous integration
which is a simple idea about committing code frequently to a shared central repository on a server, then an automated conflicts resolving,
test and build are triggered, this practice keeps developers focused on writing code for new features rather than debugging code merging issues
Today the market is full of different products that we can rely on for managing source code and continuous integration, the most famous
are:</p>
<ul>
<li><a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a></li>
<li><a href="https://gitlab.com/" target="_blank" rel="noopener noreferrer">Gitlab</a></li>
<li><a href="https://aws.amazon.com/codecommit/" target="_blank" rel="noopener noreferrer">AWS CodeCommit</a></li>
<li><a href="https://bitbucket.org/" target="_blank" rel="noopener noreferrer">BitBucket</a></li>
<li><a href="https://cloud.google.com/source-repositories" target="_blank" rel="noopener noreferrer">Google Cloud Source Repositories</a></li>
</ul>
<h1>Continuous Delivery</h1>
<p>Time to market is a key factor many businesses usually is taking into consideration, they were always interested in how to
test an idea ASAP and put that product or service in customer's hand and gather a quick feedback. To collect a reliable
feedback and analysis how the user interact with the software there is a need to provide it in a real production environment.
Continuous Delivery also known as CD respond to this requirement and more through the adoption of a set of practices and tools
that they will help your organization to automatically build, test and deploy a new version or small change to production
rapidly.
Find below some of the most used CI/CD platforms:</p>
<ul>
<li><a href="https://github.com/features/actions" target="_blank" rel="noopener noreferrer">Github Actions</a></li>
<li><a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener noreferrer">Gitlab CI/CD</a></li>
<li><a href="https://aws.amazon.com/codepipeline/" target="_blank" rel="noopener noreferrer">AWS CodePipelines</a></li>
<li><a href="https://circleci.com/" target="_blank" rel="noopener noreferrer">CircleCi</a></li>
<li><a href="https://cloud.google.com/source-repositories" target="_blank" rel="noopener noreferrer">Google Cloud Source Repositories</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-than-cicd">More than CI/CD<a href="https://algodema.com/blog/devops-strengthen-your-digital-transformation#more-than-cicd" class="hash-link" aria-label="Direct link to More than CI/CD" title="Direct link to More than CI/CD">​</a></h2>
<p>While the continuous integration and delivery remain the most known practices of DevOps, There are others not less important
and should be implemented and adopted to have a standard compliant Workflow as illustrated in the following drawing:
<img decoding="async" loading="lazy" alt="DevOps Workflow" src="https://algodema.com/assets/images/devops-workflow-591e41eaf75ddfda8d626b0231dff573.jpeg" width="1000" height="515" class="img_ev3q"></p>
<p>Once a change or new feature has been deployed, we need to operate on, to configure for example an endpoints or enable
that feature using a distributed configuration system. Then we need to monitor so see how the a deployment impacts the
user experience and performances. Automated the monitoring and capturing logs from the application, analyzing them in order
to ensure a 24/7 service availability.</p>
<p>The following cards describe some necessary practices to consider too while promoting a DevOps culture and deploying the
tools.</p>
<div class="row"><div class="column"><div class="card"><h4>Microservices</h4><p class="card-content">Microservice architecture aims at decomposing a complex application into modules developed and understood by different people</p></div></div><div class="column"><div class="card"><h4>Infrastructure as Code</h4><p class="card-content">is a practice in which infrastructure is provisioned and managed using code and software development techniques</p></div></div><div class="column"><div class="card"><h4>Monitoring and Logging</h4><p class="card-content"></p><p>Applications logs and data are collected and analyzed, and infrastructure metrics are monitored to trigger scaling up/down
or respond to an unexpected event.</p><p></p></div></div><div class="column"><div class="card"><h4>Communication</h4><p class="card-content">Merging development and operations efforts requires a good and seamless communication and collaboration, we can rely  on different channels like chat apps and tracking-systems</p></div></div></div>
<h1>Example: How microservices and DevOps can be implemented together to transform an application?</h1>
<p>With the adoption of microservices architecture, your pipeline could take another structure, in the following example
we illustrate an old and a modern pipeline for an hotel booking application:
<strong>Booking Application</strong> is an application that cover mainly 3 modules as follow:</p>
<p><img decoding="async" loading="lazy" alt="Hotel Booking Application" src="https://algodema.com/assets/images/hotel-booking-app-pipleline-v1-2bfa99b4dc823d393de523bfe906136a.svg" width="1180" height="642" class="img_ev3q">
<em>The large Hotel Booking App team commits their changes to a single source code repository. The path from code to production is long and onerous and involves manual intervention</em></p>
<p>Now let's discover how ce can transform our hotel booking application to make it easily extensible, maintainable and continuously
updated. We will decompose the monolithic application into small loosely coupled services, and put in place a modern pipeline
to help us respond rapidly to new requested changes and deliver quicker new versions. The figure below demonstrate the new application
architecture and pipeline structures:</p>
<p><img decoding="async" loading="lazy" alt="Hotel Booking Application" src="https://algodema.com/assets/images/hotel-booking-app-pipleline-v2-01f9dcd52cc5d82781f251a033fadea0.svg" width="1180" height="896" class="img_ev3q">
<em>The microservices-based application consists of a set of small, decoupled services, developed, tested and deployed independently thanks to a fully automated CI/CD</em></p>
<hr>
<p><strong>NOTE</strong>
In the above figure, we mention gitlab CI/CD as our continuous integration and deployment platform.We can use
any other combination of DevOps tools from the ones listed in previous paragraphs.</p>
<p>Finally, I would like to share my thoughts about DevOps, First of all is all about a culture, a change that the organization should be prepared for, I’m think about people within our teams who are comfortable with old processes to deliver software, we should walk with them side by side during the promotion phase to help them understand and believe in the benefits they can gain with these new ways of creating software.</p>
<p>The second point is about the tools, today there are plenty of DevOps tools we can choose from, In my point of view having a whole one platform that provides implementations for major needed tools is extremely recommended such as CI/CD, tracking systems, code source repository, etc…</p>
<p>The last point is about the word "continuous" because once we put in place these DevOps tools and spread the practices we think that the job is done but is all about continuous improvement and surely new issues will be faced and we need to be prepared to analyze and solve them again, this what engineering is about.</p>
<hr>
<ul>
<li><a href="https://aws.amazon.com/devops/what-is-devops/" target="_blank" rel="noopener noreferrer">AWS DevOps</a></li>
<li><a href="https://www.manning.com/books/microservices-patterns" target="_blank" rel="noopener noreferrer">Microservices Patterns by Chris Richardson</a></li>
</ul>]]></content>
        <author>
            <name>Reda Jaifar</name>
            <uri>https://github.com/reda-jaifar</uri>
        </author>
        <category label="devops" term="devops"/>
        <category label="agile" term="agile"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software testing from separate activity to core development]]></title>
        <id>https://algodema.com/blog/software-testing-from-separate-activity-to-core-development"</id>
        <link href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development&quot;"/>
        <updated>2021-03-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[author]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/software-testing-from-separate-activity-to-core-development-9cad4fb888f382f8dd9e54430b619909.jpeg" width="1136" height="798" class="img_ev3q">
<a href="https://www.railwaysignalling.eu/istanbul-ankara-high-speed-railway-aims-to-open-in-february2014/cropped-b-broshure-forside4-jpg" target="_blank" rel="noopener noreferrer">photo source</a></p>
<p>I remember these days when we used to write testing code after implementing the software features to make sure
that the code is working, avoid bugs. Besides, we create some scripts to automate interactions with the program.</p>
<p>Writing testing code was a separate activity from programming.</p>
<p>When Agile was born in early 2000 as the fruit of a working group including Martin Fowler, The manifesto defines how agile methods
will speed up the software development to bring new products to market faster. The testing activity starts taking a new
definition from a side part activity to undistinguished work of software development, Especially with
the Xtreme programming method that takes the TDD as its core paradigm. We will cover in further detail the TDD in a
dedicated section below, but first, let's review the different types of tests.</p>
<blockquote>
<p>NB: there are plenty of test types we can code and run, in this post, I share with you only the main ones
from a developer's perspective. Below is a non-exhaustive list of test types:</p>
</blockquote>
<ul>
<li>Functional testing</li>
<li>Load and stress testing</li>
<li>Usability testing</li>
<li>Security and Vulnerability testing</li>
<li>Monkey testing</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unit-tests">Unit tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#unit-tests" class="hash-link" aria-label="Direct link to Unit tests" title="Direct link to Unit tests">​</a></h2>
<p>This type of software testing covers small and isolated components of software to make sure they behave as expected,
Nowadays these code fragments are writing by the developer itself while implementing the product's features. There are some
properties that these tests should hold</p>
<ul>
<li>They should be fast.</li>
<li>Run frequently as part of the continuous integration process, so they are executed after each commit.</li>
<li>They need to be readable, Maintainable, and Trustworthy.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integration-tests">Integration tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#integration-tests" class="hash-link" aria-label="Direct link to Integration tests" title="Direct link to Integration tests">​</a></h2>
<p>The main role of this type of test is to confirm that the independently developed components that compose an application
or a system are working as expected together. For example in a Layered architecture-based application, you may want to make
sure that your DAO or Repositories are working fine, or verify the web layer interactions with the business layer are matching
the desired behavior, here where the integration tests come to.</p>
<p>Integration tests may cover a variety  of scenarios, here are some common ones:</p>
<ul>
<li>Testing 2 or more components interactions and data flow</li>
<li>Verify the data sent by a component is well-formatted by another one before processing it.</li>
<li>Verify components handle cases where they lost connectivity between them.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="end-to-end-tests">End to End Tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#end-to-end-tests" class="hash-link" aria-label="Direct link to End to End Tests" title="Direct link to End to End Tests">​</a></h2>
<p>They may take also the name of broad-stack tests or full-stack tests, Despite their slow time of execution they constitute
an important value for the product's quality as they test the behavior of the application in a real environment.
They are intended to reproduce the end-user interaction with the product and make sure that every feature is responding as it what designed.
These tests have the advantage of testing the software with all its parts connected, on the other hand, they have the
pain of slower to run and difficult to maintain, the reason why it's recommended to reduce the number of these tests compared to
unit or integration ones as shown in the following figure:</p>
<p><img decoding="async" loading="lazy" alt="the test pyramid" src="https://algodema.com/assets/images/test-pyramid-6ad7cfb6a008322bd4e552a7c5628d6d.png" width="850" height="492" class="img_ev3q"></p>
<h1>TDD: Test Driven Development</h1>
<p>Since its apparition there is many books have been published, I recommend reading one or more to understand this philosophy is deep and acquire
solid skills for writing tests, Here is my must-read <span><strong>Test Driven Development By Example</strong>, <strong>Kent Beck</strong> </span></p>
<blockquote>
<p>I'll define TDD as a programming style in which production and test code are written together, with the production code
just after test one.</p>
</blockquote>
<p>By now we have described the TDD, there are some rules to take into consideration:</p>
<ul>
<li>Rule one:     We don't write production code before we've written a failing test.</li>
<li>Rule two:     We don't write additional tests than sufficient to implement our first scenario of a use case.</li>
<li>Rule three:   We don't write more production code than needed to pass the currently failing test.</li>
</ul>
<p>As the TDD is relatively becoming a mature discipline, it started encouraging further innovations derived from it, such as BDD
whose main goal is to get developers, testers, and people from the business to talk to each other. In other words</p>
<blockquote>
<p>the real intent is to try and work out what your customer or business wants from the software before you start working on it</p>
</blockquote>
<p>Once we adopt the TDD and start working this way with testing side by side with production code, we'll write many tests
per use case or (feature), and more by component and you can imagine the numbers of lines we'll end up with,
managing tests code became as important as production one. I encourage you to keep tests clean.
<strong>what makes a test clean</strong>? Readability, shortness, and expressive. The following snippet shows an example of a test written
with the intention to make it clean, but surely the is no perfect example to follow, just keep in mind to give your test code your attention.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void testAcceptBooking() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // given a booking id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    BookingId bookingId = "48e58688-adc2-4e3d-be9d-f5129723b351";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Either&lt;AcceptBookingError, BookingResponse&gt; either = acceptBookingUseCase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                          .accept(bookingId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    assertThat(either.get().getStatus()).isEqualTo(BookingStatus.ACCEPTED);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is another concept that makes our tests more readable, convenient, and easier to maintain, <strong>Domain-Specific Testing Language</strong>
The idea is to create a set of functions and utilities to hide the details of the implementation of your test, the example above we can write
it this way</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void testAcceptBooking() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    giving()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ._a_bookinId()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .when()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .we_accept_a_booking()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .the_booking_should_has_accepted_status();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As described by <strong>Robert Martin</strong> in his book <strong>Clean Code</strong> a clean test follow other rules that form the F.I.R.S.T acronym</p>
<ul>
<li>Fast: Tests shoud be fast</li>
<li>Independent: Tests should not depend on each other</li>
<li>Repeatable: Tests should be repeatable in any environment</li>
<li>Self-Validating: The tests should have a boolean output</li>
<li>Timely: Tests should be written before production code.</li>
</ul>
<p>Finally, we want to think about tests as the compass to reach our destination which is the final secure, viable, and high-quality product we build.</p>
<hr>
<ul>
<li><a href="https://martinfowler.com/testing/" target="_blank" rel="noopener noreferrer">Martin Fowler's blog</a></li>
<li><a href="https://www.pearson.com/us/higher-education/program/Martin-Clean-Code-A-Handbook-of-Agile-Software-Craftsmanship/PGM63937.html" target="_blank" rel="noopener noreferrer">Clean Code Book by Robert C.Martin</a></li>
<li><a href="https://cucumber.io/blog/bdd/intro-to-bdd-and-tdd/" target="_blank" rel="noopener noreferrer">Cucumber Blog</a></li>
<li><a href="https://www.agilealliance.org/glossary/tdd/" target="_blank" rel="noopener noreferrer">Agile Alliance</a></li>
</ul>]]></content>
        <author>
            <name>Reda Jaifar</name>
            <uri>https://github.com/reda-jaifar</uri>
        </author>
        <category label="testing" term="testing"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mentoring a new junior teammate from day 1 to]]></title>
        <id>https://algodema.com/blog/mentoring-a-new-junior-teammate-from-day1-to</id>
        <link href="https://algodema.com/blog/mentoring-a-new-junior-teammate-from-day1-to"/>
        <updated>2020-09-01T07:56:31.000Z</updated>
        <summary type="html"><![CDATA[author]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/mentoring-a-new-junior-teammate-from-day1-to-fef1e935cb92434b4d613821dea36850.jpeg" width="1649" height="1101" class="img_ev3q">
<a href="https://unsplash.com/photos/PAykYb-8Er8" target="_blank" rel="noopener noreferrer">Photo by Ian Schneider</a></p>
<p>I always love my parents' job, I grew up in a family of two teachers, later my dad became a school principal. They were
sharing every day their experiences, funny situations with students, and emotions. In addition to all this
information about teaching, I retain one thing that I feel it</p>
<blockquote>
<p>Teaching others is such a satisfying feeling, especially if you can observe their progression along the time</p>
</blockquote>
<p>these concepts were carved in my subconscious mind since then. I remember in mid-high school I went to ask about a
course in a private school, After introducing my self the principal proposed to me teaching Adobe Photoshop and web
concepts, Without diving into the details of this journey, I do appreciate it.</p>
<p>Time passes and I find myself several times in the shoes of a teacher, the story I share in the next paragraph is
quite different from teaching, but has many similarities I wanted to write down.</p>
<h1>Mentoring someone, who decided?</h1>
<p>In a company, this approach may be part of its culture, So the HR team once they hire a new joiner, they ask a
senior who wants to play the role of mentor, certainly this is a voluntary decision and not a hierarchical one, as mentoring requires first of all the initiative and passion to do it.
This is not a work task to complete, this is a
mindset to share with love.</p>
<p>Regardless of having this culture or not, in many cases, a spontaneous relationship between a senior and a new team
-member took place, mainly due to their personalities rapprochement. Then we begin to talk about mentoring as the
senior introduces his new team-mate to other teams, lets him discover departments, work methods, and any knowledge
that may help him be  well integrated.</p>
<h1>What should we have to succeed in a mentoring program?</h1>
<p>In my opinion, we need to behave like coach  and trainee, or like teacher and student. As a mentor, Having this
passion for knowledge sharing, feeling so satisfied while seeing others growing up, Being generous when it comes to
advising and guiding are all "must-have" values we believe in. Regarding skills, we need to be good in
communication, the capacity of thought, and patience.</p>
<p>On the other side, the trainee needs some skills, or call them behaviors like being good
listener, a hungry man who wants to enrich his knowledge by asking for details, but certainly without disturbing
the mentor, Because this one is meanwhile an employee with tasks and missions to complete, So as a trainee we keep
calm and patient when we don't have some information or answers immediately. For the trainee the mentoring
should represent an opportunity to know more, have different points of view, but in any case should impact
our analysis capabilities, and influence our decision-making, we have to protect our autonomous which is
the most valuable goal we target.</p>
<h1>Day 1</h1>
<p>I've been delighted to welcome with my team our new colleague who has just graduated and he is today starting his
first job as a software engineer. I took him for a short tour to discover the office, the facilities, and our
beautiful kitchen corner where often we share coffee time.
I think the first impression is very important the reason why my team and I gave it all our intention to make it at
the same time funny and useful for our team-mate. We wanted to help him feel very comfortable. For today apart
from receiving his laptop and tools no code or pull request.</p>
<h1>Day 2</h1>
<p>A short introduction to explain the project views, our work methods, and collaboration best practices we believe in
within our entity. As a software engineer focusing on technical staff, I suggested putting our junior colleague in
touch with our scrum master for the purpose to learn about agility, how we use SCRUM as a reference with all its
rituals from daily stand up to sprint retrospective.</p>
<p>Now it's coffee time, a good moment to show him an important value within our company, generosity especially when it
comes to knowledge, we believe that sharing is such a powerful value that helps all of up to grow up together and
progress whatever our field of expertise. Although everyone has a clear and well-defined role within the team, being
aware of what others are doing is crucial cope with any absence or unavailability.</p>
<h1>Day 3</h1>
<p>Our new colleague is very motivated and curious, his questions are dept and constructive, but unfortunately, I could
not answer all of them immediately, I let him know that he can also email me and I'll answer him later once I finish
a prioritized task. The lesson here is very simple, a question may be answered later but should never end up
without any response. To avoid any confusion or lack of trust that may affect my relationship with my junior
colleague.</p>
<h1>Day 4</h1>
<p>Collaboration over delegation is what happens when we have less time to explain or teach someone else how to complete
a task or do a job, but this approach is too bad. As a mentor, I prefer to collaborate with trainees walking together
side by side armed with passion and patience with one goal: helping him being autonomous instead of completing tasks
for him quickly no matter how much time will take, training others is always a pleasure and a must-have for a mentor.
A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly</p>
<blockquote>
<p>A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly</p>
</blockquote>
<h1>Day 5</h1>
<p>Are you a good listener? I was convinced as a mentor I need to listen a lot to my trainee, give him all the time to
explain his point of view or vision even though I'm not okay with or I'm not sure he is not on the right way, keep calm
and let him finish, I see many colleagues when a junior comes with a new idea, or an initiative, they quickly try
to crop believing that is it a wast time, Unfortunately, this behavior may dramatically degrade a junior’s
self-confidence and his motivation for future initiatives.</p>
<h1>Next Day</h1>
<p>The days go by one after the other and I’m getting so happy to see our team growing up and how our new junior colleague
is taking over subjects and becoming autonomous, This trusted and honest relationship we built together is bringing
what is expected to be. I do believe that mentoring someone else is nothing other than giving him the right
and the necessary tools to dive alone with confidence into any subject. This friendly relationship helps us learn
from each other, I do appreciate supporting my colleague during his first days within our team and in the company.
His questions, exchanges, and remarks let me learn how to communicate and explain my ideas and point of view at a
low level using simple and easy expressions to understand when talking to a debutant person or someone outside of
my field of expertise.</p>
<h1>It's been a constructive journey</h1>
<p>Along the way, I learned a lot of things and values I would like to summarize below:</p>
<ul>
<li>Stay humble when you talk to junior or debutant people.</li>
<li>There is always something to learn from others whatever their expertise level.</li>
<li>Share and publish your knowledge to help serve and improve yourself and others.</li>
<li>Gain respect and recognition</li>
</ul>
<p><em>publish, share, exchange to help serve, shape and improve the world</em></p>]]></content>
        <author>
            <name>Reda Jaifar</name>
            <uri>https://github.com/reda-jaifar</uri>
        </author>
        <category label="team" term="team"/>
        <category label="collaboration" term="collaboration"/>
        <category label="share" term="share"/>
    </entry>
</feed>