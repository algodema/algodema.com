<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>algodema Blog</title>
        <link>https://algodema.com/blog</link>
        <description>algodema Blog</description>
        <lastBuildDate>Sat, 06 Mar 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Software testing from separate activity to core development]]></title>
            <link>https://algodema.com/blog/software-testing-from-separate-activity-to-core-development"</link>
            <guid>https://algodema.com/blog/software-testing-from-separate-activity-to-core-development"</guid>
            <pubDate>Sat, 06 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[author]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/software-testing-from-separate-activity-to-core-development-9cad4fb888f382f8dd9e54430b619909.jpeg" width="1136" height="798" class="img_ev3q">
<a href="https://www.railwaysignalling.eu/istanbul-ankara-high-speed-railway-aims-to-open-in-february2014/cropped-b-broshure-forside4-jpg" target="_blank" rel="noopener noreferrer">photo source</a></p>
<p>I remember these days when we used to write testing code after implementing the software features to make sure
that the code is working, avoid bugs. Besides, we create some scripts to automate interactions with the program.</p>
<p>Writing testing code was a separate activity from programming.</p>
<p>When Agile was born in early 2000 as the fruit of a working group including Martin Fowler, The manifesto defines how agile methods
will speed up the software development to bring new products to market faster. The testing activity starts taking a new
definition from a side part activity to undistinguished work of software development, Especially with
the Xtreme programming method that takes the TDD as its core paradigm. We will cover in further detail the TDD in a
dedicated section below, but first, let's review the different types of tests.</p>
<blockquote>
<p>NB: there are plenty of test types we can code and run, in this post, I share with you only the main ones
from a developer's perspective. Below is a non-exhaustive list of test types:</p>
</blockquote>
<ul>
<li>Functional testing</li>
<li>Load and stress testing</li>
<li>Usability testing</li>
<li>Security and Vulnerability testing</li>
<li>Monkey testing</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="unit-tests">Unit tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#unit-tests" class="hash-link" aria-label="Direct link to Unit tests" title="Direct link to Unit tests">​</a></h2>
<p>This type of software testing covers small and isolated components of software to make sure they behave as expected,
Nowadays these code fragments are writing by the developer itself while implementing the product's features. There are some
properties that these tests should hold</p>
<ul>
<li>They should be fast.</li>
<li>Run frequently as part of the continuous integration process, so they are executed after each commit.</li>
<li>They need to be readable, Maintainable, and Trustworthy.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="integration-tests">Integration tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#integration-tests" class="hash-link" aria-label="Direct link to Integration tests" title="Direct link to Integration tests">​</a></h2>
<p>The main role of this type of test is to confirm that the independently developed components that compose an application
or a system are working as expected together. For example in a Layered architecture-based application, you may want to make
sure that your DAO or Repositories are working fine, or verify the web layer interactions with the business layer are matching
the desired behavior, here where the integration tests come to.</p>
<p>Integration tests may cover a variety  of scenarios, here are some common ones:</p>
<ul>
<li>Testing 2 or more components interactions and data flow</li>
<li>Verify the data sent by a component is well-formatted by another one before processing it.</li>
<li>Verify components handle cases where they lost connectivity between them.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="end-to-end-tests">End to End Tests<a href="https://algodema.com/blog/software-testing-from-separate-activity-to-core-development%22#end-to-end-tests" class="hash-link" aria-label="Direct link to End to End Tests" title="Direct link to End to End Tests">​</a></h2>
<p>They may take also the name of broad-stack tests or full-stack tests, Despite their slow time of execution they constitute
an important value for the product's quality as they test the behavior of the application in a real environment.
They are intended to reproduce the end-user interaction with the product and make sure that every feature is responding as it what designed.
These tests have the advantage of testing the software with all its parts connected, on the other hand, they have the
pain of slower to run and difficult to maintain, the reason why it's recommended to reduce the number of these tests compared to
unit or integration ones as shown in the following figure:</p>
<p><img decoding="async" loading="lazy" alt="the test pyramid" src="https://algodema.com/assets/images/test-pyramid-6ad7cfb6a008322bd4e552a7c5628d6d.png" width="850" height="492" class="img_ev3q"></p>
<h1>TDD: Test Driven Development</h1>
<p>Since its apparition there is many books have been published, I recommend reading one or more to understand this philosophy is deep and acquire
solid skills for writing tests, Here is my must-read <span><strong>Test Driven Development By Example</strong>, <strong>Kent Beck</strong> </span></p>
<blockquote>
<p>I'll define TDD as a programming style in which production and test code are written together, with the production code
just after test one.</p>
</blockquote>
<p>By now we have described the TDD, there are some rules to take into consideration:</p>
<ul>
<li>Rule one:     We don't write production code before we've written a failing test.</li>
<li>Rule two:     We don't write additional tests than sufficient to implement our first scenario of a use case.</li>
<li>Rule three:   We don't write more production code than needed to pass the currently failing test.</li>
</ul>
<p>As the TDD is relatively becoming a mature discipline, it started encouraging further innovations derived from it, such as BDD
whose main goal is to get developers, testers, and people from the business to talk to each other. In other words</p>
<blockquote>
<p>the real intent is to try and work out what your customer or business wants from the software before you start working on it</p>
</blockquote>
<p>Once we adopt the TDD and start working this way with testing side by side with production code, we'll write many tests
per use case or (feature), and more by component and you can imagine the numbers of lines we'll end up with,
managing tests code became as important as production one. I encourage you to keep tests clean.
<strong>what makes a test clean</strong>? Readability, shortness, and expressive. The following snippet shows an example of a test written
with the intention to make it clean, but surely the is no perfect example to follow, just keep in mind to give your test code your attention.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void testAcceptBooking() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // given a booking id</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    BookingId bookingId = "48e58688-adc2-4e3d-be9d-f5129723b351";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Either&lt;AcceptBookingError, BookingResponse&gt; either = acceptBookingUseCase</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                          .accept(bookingId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    assertThat(either.get().getStatus()).isEqualTo(BookingStatus.ACCEPTED);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is another concept that makes our tests more readable, convenient, and easier to maintain, <strong>Domain-Specific Testing Language</strong>
The idea is to create a set of functions and utilities to hide the details of the implementation of your test, the example above we can write
it this way</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">@Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  public void testAcceptBooking() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    giving()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ._a_bookinId()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .when()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .we_accept_a_booking()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    .then()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        .the_booking_should_has_accepted_status();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>As described by <strong>Robert Martin</strong> in his book <strong>Clean Code</strong> a clean test follow other rules that form the F.I.R.S.T acronym</p>
<ul>
<li>Fast: Tests shoud be fast</li>
<li>Independent: Tests should not depend on each other</li>
<li>Repeatable: Tests should be repeatable in any environment</li>
<li>Self-Validating: The tests should have a boolean output</li>
<li>Timely: Tests should be written before production code.</li>
</ul>
<p>Finally, we want to think about tests as the compass to reach our destination which is the final secure, viable, and high-quality product we build.</p>
<hr>
<ul>
<li><a href="https://martinfowler.com/testing/" target="_blank" rel="noopener noreferrer">Martin Fowler's blog</a></li>
<li><a href="https://www.pearson.com/us/higher-education/program/Martin-Clean-Code-A-Handbook-of-Agile-Software-Craftsmanship/PGM63937.html" target="_blank" rel="noopener noreferrer">Clean Code Book by Robert C.Martin</a></li>
<li><a href="https://cucumber.io/blog/bdd/intro-to-bdd-and-tdd/" target="_blank" rel="noopener noreferrer">Cucumber Blog</a></li>
<li><a href="https://www.agilealliance.org/glossary/tdd/" target="_blank" rel="noopener noreferrer">Agile Alliance</a></li>
</ul>]]></content:encoded>
            <category>testing</category>
        </item>
        <item>
            <title><![CDATA[Mentoring a new junior teammate from day 1 to]]></title>
            <link>https://algodema.com/blog/mentoring-a-new-junior-teammate-from-day1-to</link>
            <guid>https://algodema.com/blog/mentoring-a-new-junior-teammate-from-day1-to</guid>
            <pubDate>Tue, 01 Sep 2020 07:56:31 GMT</pubDate>
            <description><![CDATA[author]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="author" src="https://algodema.com/assets/images/mentoring-a-new-junior-teammate-from-day1-to-fef1e935cb92434b4d613821dea36850.jpeg" width="1649" height="1101" class="img_ev3q">
<a href="https://unsplash.com/photos/PAykYb-8Er8" target="_blank" rel="noopener noreferrer">Photo by Ian Schneider</a></p>
<p>I always love my parents' job, I grew up in a family of two teachers, later my dad became a school principal. They were
sharing every day their experiences, funny situations with students, and emotions. In addition to all this
information about teaching, I retain one thing that I feel it</p>
<blockquote>
<p>Teaching others is such a satisfying feeling, especially if you can observe their progression along the time</p>
</blockquote>
<p>these concepts were carved in my subconscious mind since then. I remember in mid-high school I went to ask about a
course in a private school, After introducing my self the principal proposed to me teaching Adobe Photoshop and web
concepts, Without diving into the details of this journey, I do appreciate it.</p>
<p>Time passes and I find myself several times in the shoes of a teacher, the story I share in the next paragraph is
quite different from teaching, but has many similarities I wanted to write down.</p>
<h1>Mentoring someone, who decided?</h1>
<p>In a company, this approach may be part of its culture, So the HR team once they hire a new joiner, they ask a
senior who wants to play the role of mentor, certainly this is a voluntary decision and not a hierarchical one, as mentoring requires first of all the initiative and passion to do it.
This is not a work task to complete, this is a
mindset to share with love.</p>
<p>Regardless of having this culture or not, in many cases, a spontaneous relationship between a senior and a new team
-member took place, mainly due to their personalities rapprochement. Then we begin to talk about mentoring as the
senior introduces his new team-mate to other teams, lets him discover departments, work methods, and any knowledge
that may help him be  well integrated.</p>
<h1>What should we have to succeed in a mentoring program?</h1>
<p>In my opinion, we need to behave like coach  and trainee, or like teacher and student. As a mentor, Having this
passion for knowledge sharing, feeling so satisfied while seeing others growing up, Being generous when it comes to
advising and guiding are all "must-have" values we believe in. Regarding skills, we need to be good in
communication, the capacity of thought, and patience.</p>
<p>On the other side, the trainee needs some skills, or call them behaviors like being good
listener, a hungry man who wants to enrich his knowledge by asking for details, but certainly without disturbing
the mentor, Because this one is meanwhile an employee with tasks and missions to complete, So as a trainee we keep
calm and patient when we don't have some information or answers immediately. For the trainee the mentoring
should represent an opportunity to know more, have different points of view, but in any case should impact
our analysis capabilities, and influence our decision-making, we have to protect our autonomous which is
the most valuable goal we target.</p>
<h1>Day 1</h1>
<p>I've been delighted to welcome with my team our new colleague who has just graduated and he is today starting his
first job as a software engineer. I took him for a short tour to discover the office, the facilities, and our
beautiful kitchen corner where often we share coffee time.
I think the first impression is very important the reason why my team and I gave it all our intention to make it at
the same time funny and useful for our team-mate. We wanted to help him feel very comfortable. For today apart
from receiving his laptop and tools no code or pull request.</p>
<h1>Day 2</h1>
<p>A short introduction to explain the project views, our work methods, and collaboration best practices we believe in
within our entity. As a software engineer focusing on technical staff, I suggested putting our junior colleague in
touch with our scrum master for the purpose to learn about agility, how we use SCRUM as a reference with all its
rituals from daily stand up to sprint retrospective.</p>
<p>Now it's coffee time, a good moment to show him an important value within our company, generosity especially when it
comes to knowledge, we believe that sharing is such a powerful value that helps all of up to grow up together and
progress whatever our field of expertise. Although everyone has a clear and well-defined role within the team, being
aware of what others are doing is crucial cope with any absence or unavailability.</p>
<h1>Day 3</h1>
<p>Our new colleague is very motivated and curious, his questions are dept and constructive, but unfortunately, I could
not answer all of them immediately, I let him know that he can also email me and I'll answer him later once I finish
a prioritized task. The lesson here is very simple, a question may be answered later but should never end up
without any response. To avoid any confusion or lack of trust that may affect my relationship with my junior
colleague.</p>
<h1>Day 4</h1>
<p>Collaboration over delegation is what happens when we have less time to explain or teach someone else how to complete
a task or do a job, but this approach is too bad. As a mentor, I prefer to collaborate with trainees walking together
side by side armed with passion and patience with one goal: helping him being autonomous instead of completing tasks
for him quickly no matter how much time will take, training others is always a pleasure and a must-have for a mentor.
A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly</p>
<blockquote>
<p>A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly</p>
</blockquote>
<h1>Day 5</h1>
<p>Are you a good listener? I was convinced as a mentor I need to listen a lot to my trainee, give him all the time to
explain his point of view or vision even though I'm not okay with or I'm not sure he is not on the right way, keep calm
and let him finish, I see many colleagues when a junior comes with a new idea, or an initiative, they quickly try
to crop believing that is it a wast time, Unfortunately, this behavior may dramatically degrade a junior’s
self-confidence and his motivation for future initiatives.</p>
<h1>Next Day</h1>
<p>The days go by one after the other and I’m getting so happy to see our team growing up and how our new junior colleague
is taking over subjects and becoming autonomous, This trusted and honest relationship we built together is bringing
what is expected to be. I do believe that mentoring someone else is nothing other than giving him the right
and the necessary tools to dive alone with confidence into any subject. This friendly relationship helps us learn
from each other, I do appreciate supporting my colleague during his first days within our team and in the company.
His questions, exchanges, and remarks let me learn how to communicate and explain my ideas and point of view at a
low level using simple and easy expressions to understand when talking to a debutant person or someone outside of
my field of expertise.</p>
<h1>It's been a constructive journey</h1>
<p>Along the way, I learned a lot of things and values I would like to summarize below:</p>
<ul>
<li>Stay humble when you talk to junior or debutant people.</li>
<li>There is always something to learn from others whatever their expertise level.</li>
<li>Share and publish your knowledge to help serve and improve yourself and others.</li>
<li>Gain respect and recognition</li>
</ul>
<p><em>publish, share, exchange to help serve, shape and improve the world</em></p>]]></content:encoded>
            <category>team</category>
            <category>collaboration</category>
            <category>share</category>
        </item>
    </channel>
</rss>