"use strict";(self.webpackChunkalgodema=self.webpackChunkalgodema||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"clean-write-the-code-you-want-to-read","metadata":{"permalink":"/blog/clean-write-the-code-you-want-to-read","source":"@site/blog/2022-08-30-clean-write-the-code-you-want-to-read.mdx","title":"Clean code: Write The Code You Want To Read (Part 1)","description":"author","date":"2022-08-30T21:06:46.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"},{"inline":true,"label":"craftmanship","permalink":"/blog/tags/craftmanship"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"}],"readingTime":5.815,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"clean-write-the-code-you-want-to-read","title":"Clean code: Write The Code You Want To Read (Part 1)","date":"2022-08-30 21:06:46 +0100","authors":["reda"],"tags":["software","clean code","craftmanship","developer"]},"unlisted":false,"nextItem":{"title":"Introduction to software functional and behaviour testing","permalink":"/blog/introduction-to-software-functional-and-behaviour-testing"}},"content":"![author](/img/blog/clean-code-write-the-code-you-want-to-read.jpg)\\n[photo source](https://unsplash.com/photos/FTNGfpYCpGM)\\n\\n## Clean Code!\\n### Why should I care?\\nWe, software engineers almost spent more time reading code than writing new lines, how many times do we complain about someone else\'s code? Many factors can give us an idea about\\nthe quality of code and how much the writer cares about it. If you dislike reading bad code, you already made your first step toward writing good code if you care about\\nyour heritage.\\nThere are many good reasons to care about writing clean code, adding the artistic layer to your code is an inspiring reason for me to learn and apply the clean code rules and principles.\\n\\n### What clean code brings to me?\\nClean code is what makes us professional programmers, someone with high-level ethics who cares about the present and the future of his code, he believes that lines of code\\ncan live for long and can be enhanced by others with ease and passion. Like a book author what makes him happy is how readers enjoy turning the pages of his book one after the other without realizing the time elapsed.\\n\\n### Clean code is about philosophy!\\nClean code makes us more than a programmer, it helps us develop a good vision of the software we are building, caring about its growth, evolutionary, and enhancement. Clean code makes us a thinker about\\nmaintainability, design, and the ability of the software to cope with changes quickly and easily.\\nCode is written to live but also to change and evolve.\\n\\n### We are authors\\nYes, we programmers are authors, that said, we have readers, Indeed we are responsible for communicating well with readers. The next time we write a line of code, we\'ll remember\\nwe are authors, writing for readers who will judge our effort.\\n\\n## What clean code covers?\\n\\n### Naming\\nAs a programmer the first step of writing code is choosing names, for variables, functions, classes, packages and source code files.\\nWhile this seems easy and instinctive, choosing good names takes time but saves more than it takes.\\n\\nLet\'s look at the following code snipped:\\n```shell\\n d = Date.now();\\n```\\nThe name \\"d\\" above has nothing to reveal, even tough it is a date object, but we cannot know the intention of usage, either its start date or end date.\\nNote that even naming it startDate doesn\'t give it any sense, because we need to know as a reader what is the context of the start date.\\nHers is a suggestion for this example:\\n```shell\\ntaskStartDate = Date.now();\\n```\\n#### Abbreviation\\nAbbreviation Is one of the most common mistakes concerning variable naming, as a programmer can you guess what this variable name below means?\\n```shell\\nmsg\\n```\\nCan you know that msg may mean \\"message\\" or \\"most scored goal\\"? Personally, I don\'t want to spend time exploring many lines before\\nor after this one to understand the context of this variable in case I need to make a change. The rule is to avoid any disinformation.\\n\\n#### Distinction\\nAnother issue with naming is the number-series such as (variable1, variable2), consider the following function:\\n````java\\npublic static void duplicateString(char a1[], char a2[]){\\n        ...\\n        }\\n````\\nis it not more readable if we use \\"source\\" and \\"destination\\" as the names of the two arguments? I think yes, it is.\\n\\nAdding noise words is another problem that impacts the cleanness of the code, you may want  to specify that a variable is \\na String, so you name it: __\\"emailContentString\\"__, Here the \\"String\\" is just redundant as is not part of the name but the type\\nwhich has nothing to do with the meaning of the variable.\\n\\n#### Word Sounding\\nAs a programmer, there is a good chance that while we are writing code, our brain is pronouncing the text we type. when we cut the connection\\nbetween our brain and the activity of writing, we usually type variable names that could be difficult to pronounce, and the consequences\\nare multiple: other developers won\'t be able to retain them easily and these names will be demanding to discuss with the business analysts.\\nWhile English is the most used natural language used to write code, using other languages such as  French or Italian, apply the same rules regarding\\nhow easily the variables, functions, or classes names are pronounceable.\\n\\n#### Are names accessible?\\nEach time I take over developing a new feature or fixing a bug that requires modifying a source code that not has been writing by me,\\nI start by searching some keywords that I got from the context of the domain system. For Example when I was asked to fix\\na UI bug in a web application developed using ReactJS then I was trying to find the matching component in the source code, but it was not as\\neasy as expected and I spent 30 minutes before finding the component named with a number prefix: 1CounterComponent. This is why\\nchoosing names that are straightforward to find is a very useful rule to follow.\\n\\n\\n#### Coding Conventions\\nEvery programming language provides coding conventions regarding variables, functions, classes, and naming source code files. While\\nthe naming took a good part of these conventions, they also cover indentation, comments, declaration order, etc ...\\nI don\'t hesitate to refer to these conventions. But during my modest experience, I came across some coding conventions\\nfrom specific programming languages applied to another one. This is strongly discouraged or prohibited by the teams themselves.\\n\\n#### Technical Vs Business Names\\nWe write code to build software that will be solving a problem, For example: coding an application that computes taxes.\\nTrying to be a good programmer implies differentiating technical things from business-related ones. whenever you code\\na technical concept don\'t try to use mainly a domain name, For example: declaring a variable that holds an instance of the\\nHTTP client could have the following name: __httpClient__, but if we try to include the business-related usage we can name it:\\n__taxesRulesHttpClient__ as you can see in this case the domain doesn\'t bring any help instead is just making a technical\\nthing harder.\\n\\n#### A last note\\nWriting clean code requires a piece of cultural knowledge and good descriptive, communication, and writing skills, we can develop\\nthese skills by learning from communication experts either by reading books or taking courses on how to write, synthesis, and\\norder ideas. Also evolving on the natural language we use to code. For example, if we write code in English, it will be helpful\\nto learn more words, synonyms, sentences, etc...\\n\\nSo far I wanted to pay your attention to the importance of clean code, and how can impact the software\'s quality and maintenance,\\nWe covered mainly the naming concept in this part. Other articles will follow to cover other aspects concerned by clean code.\\n\\n----\\n\\n* [The Clean Code Blog](https://blog.cleancoder.com/)\\n* [Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin](https://www.oreilly.com/library/view/clean-code-a/9780136083238/)\\n* [10 steps to clean code](https://www.pluralsight.com/blog/software-development/10-steps-to-clean-code)\\n* [Kotlin coding conventions](https://kotlinlang.org/docs/coding-conventions.html)"},{"id":"introduction-to-software-functional-and-behaviour-testing","metadata":{"permalink":"/blog/introduction-to-software-functional-and-behaviour-testing","source":"@site/blog/2022-02-26-introduction-to-software-functional-and-behaviour-testing.mdx","title":"Introduction to software functional and behaviour testing","description":"author","date":"2022-02-26T22:45:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"},{"inline":true,"label":"craftmanship","permalink":"/blog/tags/craftmanship"},{"inline":true,"label":"tests","permalink":"/blog/tags/tests"},{"inline":true,"label":"cucumber","permalink":"/blog/tags/cucumber"}],"readingTime":6.335,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"introduction-to-software-functional-and-behaviour-testing","title":"Introduction to software functional and behaviour testing","date":"2022-02-26 22:45:31 +0100","authors":["reda"],"tags":["software","clean code","craftmanship","tests","cucumber"]},"unlisted":false,"prevItem":{"title":"Clean code: Write The Code You Want To Read (Part 1)","permalink":"/blog/clean-write-the-code-you-want-to-read"},"nextItem":{"title":"Software Architecture: The Implementation View","permalink":"/blog/software-architecture-implementation-view"}},"content":"![author](/img/blog/introduction-to-software-functional-and-behavior-testing.jpg)\\n[photo source](https://images.unsplash.com/photo-1600492515568-8868f609511e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1250&q=80)\\n\\n## Functional Testing\\n### What is a functional test ?\\nFunctional tests are one of these software testing approaches or test types such as (unit tests, integration tests, load tests, penetration tests, ...) all with one mission to test that the software is compliant whether with business specification, technical requirements or other quality and usability metrics. But functional tests focus on ensuring that the software functions behave as expected by the business specifications, these tests don\'t interact with source code such as unit tests, but mainly with the software features.\\nA functional test usually puts the system, the application or the software we want to test in an initial state where we provide the necessary elements to make the test executable such as storing a list of cars in the database, then we test the feature find a car for the period of (2nd march to 7th march), then we validate that the output matches the expected result.\\n### Why do we need to write functional tests?\\nWe need to write functional test to validate the features from a user perspective, hence we validate the following:\\n\\n -  Feature is working as expected by the specifications\\n -  Usability: checks whether the feature is easily usable, for example, a button is freely reachable on the page.\\n -  Errors: when a subsystem is not responding, do we display an error message to the user to help him understand what\'s going on.\\n\\n### Functional testing style\\nA common form that functional testing take is the Given-When-Then, this approach coming from the [BDD (Behaviour Driven Development)](#bdd-behavior-driven-development) defines the structure of many testing frameworks such as Cucumber that we will cover in our example later in this article.\\nThe prime idea is to break down a scenario (test)  into three sections:\\n\\n - **Given**:  the given part defines the pre-conditions before challenging the system by executing or running a feature.\\n - **When**: is do we want to do with the system, for example ( *when I book a car*)\\n - **Then**: describes the expected result or output after the application or the software  behaves in to respond to your action.\\n\\nTo simplify the idea, let\'s write an example for a rental car website using the Cucumber Tool (Framework):\\n\\n    Feature: User book a car\\n\\t    Scenario: User requests to book a car from 1st March to 7th March 2022\\n\\t\\t     Given I select a car from the available cars for the period (1st March to 7th March 2022)\\n\\t\\t\\t    And I select GPS as an additional Option\\n\\t\\t\\t    And I select Full Insurance\\n\\t\\t\\t When I book the car\\n\\t\\t\\t Then I should receive a confirmation\\n\\n\\n### BDD: Behavior Driven Development\\nBDD combines the best practices of  **Test Driven Development** TDD, **Domain-driven Development** (**DDD**), and **Object Oriented Programming** (**OOPs**)\\nFor an agile team, scoping a feature is a very important task, as the stakeholders are talking about the business requirements, the development team is more interested in the technical challenges, Here comes the **BDD** to provide a common language that allows efficient communication and feedback and then a perfect specification, development vision, and feature delivery.\\n\\nBDD closes the gap between the business and the technical people by:\\n\\n - Encouraging collaboration across roles to build a shared understanding of the problem to be solved.\\n - Working in a rapid and small iteration to promote the feedback and optimize the value delivery.\\n - Producing documentation that is automatically checked against the software behavior.\\n\\nThere is a good chance that you\'re agile at your organization so you already plan your work in small increments of value like User Stories. In this case, BDD will help you to deliver your promises of agile on time. BDD does not replaces your processes but enhances them.\\n\\n### BDD and Functional Testing\\nLet\'s focus on the word **Behaviour** so functional testing of behavior testing is these tests your write to check your system or the software you\'re building how behaves. Functional testing can also be called ***behavior testing***.\\n\\n### Behaviour Testing in action\\nTo illustrate all these abstract notions explained briefly in this article, let\'s write a small application and its behavior tests using **Kotlin** programming language and **Cucumber**\\n\\n - **Kotlin** is a JVM programming language, like Java, Scala, or Groovy\\n - **Cucumber** is a testing tool that supports Behavior Driven Development\\n - **Gherkin**  is a business readable language that helps you to describe business behavior without going into details of implementation\\n\\nWe will need the following to build this example:\\n\\n 1.   [Java SE](https://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html)  (Java 9 and higher are not yet supported by Cucumber)\\n 2.   [Maven](https://maven.apache.org/index.html)  - version 3.3.1 or higher\\n 3.   [IntelliJ IDEA](https://www.jetbrains.com/idea/)  (which will be used in this tutorial)\\n    -   [IntelliJ IDEA Cucumber for Java plugin](https://plugins.jetbrains.com/plugin/7212-cucumber-for-java)\\n    -   [IntelliJ IDEA Kotlin plugin](https://plugins.jetbrains.com/plugin/6954-kotlin)\\n\\n\\n1. Clone the project from github\\n\\n```shell\\ngit clone https://github.com/reda-jaifar/hands-on-kotlin.git\\ncd sportair\\n```\\n 2. Open the project in IntelliJ IDEA:\\n\\n\\t-   **File -> Open\u2026 -> (Select the pom.xml)**\\n\\t-   Select  **Open as Project**\\n\\n3. Verify Cucumber installation\\n\\n```shell\\nmvn test\\n```\\nNow our environment is ready, let\'s write some scenarios for the following application:\\n\\n    SportAir is an application that indicates whether we\\n    can exercise outside or not based on the weather.\\n\\nIn Cucumber, an example is called a [scenario](https://cucumber.io/docs/gherkin/reference#example). Scenarios are defined in `.feature` files, which are stored in the directory (or a subdirectory).\\n\\nCreate an empty file called `src/test/resources/sportair/can_we_exercice_outtside.feature`  with the following content:\\n\\n    Feature: Can we exercise outside?\\n          Everybody wants to know if we can exercise in the air\\n\\n          Scenario: The weather is not convenient for exercising outside\\n            Given The temperature is 42 celsius\\n            When I ask whether I can exercise outside\\n            Then I should be told \\"Nope\\"\\n\\nif you\'re using Intellij Idea Cucumber Plugin, you should see the keyword colored, below the meaning of each:\\n\\n - **Feature**: is a keyword that should be followed by the feature name, a good practice is to use the name of the file. The line that follows is a description that will be ignored by Cucumber execution parser.\\n   <br />**NB**:  We use a feature by file\\n - **Scenario**: defines the name of a scenario, we can have as many scenarios as expected by a feature.\\n - **Given, When, Then**: are the steps of the scenario. Refers to the definition [above](#functional-testing-style).\\n```shell\\nmvn test\\n ```\\n\\n```shell\\nThe output should be something like the following:\\n Given The temperature is 42                                  # StepDefs.The temperature is(int)\\n    When I ask whether I can exercise outside                    # StepDefs.I ask whether I can exercise outside()\\n    Then I should be told nope                                   # StepDefs.I should be told(String)\\n\\n  Scenario: The weather is convenient for exercising outside # sportair/can_we_exercice_outside.feature:9\\n    Given The temperature is 24                              # StepDefs.The temperature is(int)\\n    When I ask whether I can exercise outside                # StepDefs.I ask whether I can exercise outside()\\n    Then I should be told of course                          # StepDefs.I should be told(String)\\n\\n2 Scenarios (2 passed)\\n6 Steps (6 passed)\\n0m0.181s\\n\\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.403 sec\\n\\nResults :\\n\\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0\\n```\\n\\n###  Behavior Driven Testing Benefits\\n\\n -  Helps document specification by the usage of non-technical language\\n -  Focuses on how the system should behave from both user and developer perspective\\n -  Gives high visibility of the system design\\n -  Helps to make the software or the system meet the user need\\n\\nThe figure below illustrates the process of BDD and how it can help to write down behavior tests.\\n\\n![BDD Process](/img/blog/bdd-process.jpeg)\\n\\n*This figure defines a step flow to help define and write down behavior tests*\\n\\n----\\n\\n* [Cucumber Documentation](https://cucumber.io/docs/cucumber/)\\n* [Testing & Domain Specific Language By Martin Fowler](https://martinfowler.com/bliki/GivenWhenThen.html)\\n* [Domain-driven design Book by Eric Evans](https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/)"},{"id":"software-architecture-implementation-view","metadata":{"permalink":"/blog/software-architecture-implementation-view","source":"@site/blog/2021-11-20-software-architecture-implementation-view.mdx","title":"Software Architecture: The Implementation View","description":"author","date":"2021-11-20T18:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"system design","permalink":"/blog/tags/system-design"},{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"monolithic","permalink":"/blog/tags/monolithic"}],"readingTime":6.725,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-implementation-view","title":"Software Architecture: The Implementation View","date":"2021-11-20 18:49:31 +0100","authors":["reda"],"tags":["software","architecture","system design","microservices","monolithic"]},"unlisted":false,"prevItem":{"title":"Introduction to software functional and behaviour testing","permalink":"/blog/introduction-to-software-functional-and-behaviour-testing"},"nextItem":{"title":"Software Architecture: The Logical View","permalink":"/blog/software-architecture-logical-view"}},"content":"![author](/img/blog/implementation-view.jpeg)\\n[photo source](https://middleware.io/wp-content/uploads/2021/09/What-are-microservices_-How-does-microservices-architecture-work_.jpg)\\n\\n![The 1+4 Model View](/img/blog/1plus4model-implementation-view.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\n\\n# The implementation view\\nIncludes the result of the build process that can be run or deployed such as a Java JAR or Node.js Package. These artifacts interact\\nwith each other in the form of a composition or dependency relationship.\\n\\n##  The Monolithic Architecture Style\\nLet\'s extract the definition of monolithic architecture from an example. Imagine you are invited to develop an enterprise application for\\nmanaging music concerts ticketing, One of the requirements is to access the system from the browser and a mobile native application. SO the application\\nwill handle HTTP requests, execute a function and access a database to persist the data. One of the design options we may have\\nis to create different components each one is responsible for a specific business logic (event subscription, payments, ticket editing ...). if we choose to develop with\\nthe java programming language and the spring framework, we\'ll have one application with many modules interconnected and coupled to accomplish\\nthe job. But what about the deployment? what type of build output will generate and how to deploy it into a production environment.\\nThe answer is we will generate a single Java WAR file.\\n![author](/img/blog/monolithic-architecture.png)\\n\\n*The monolithic representation of our example application (Music Event Application) where we can distinguish bounded functions of the system but all in one artifact*\\n\\nThis is what monolithic architecture is about to define the output of your source code as one piece that you can easily:\\n* Deploy (push or put into the production environment, or any other environment such as development or staging)\\n* Scale (run multiple instances of the application in response to increasing traffic)\\n* Debug (in case of non-normal behavior of the system you can explore the logs, check the config, and so on to find the error, all these things are on the same process)\\n\\n- Question: Now the system is up and running, but a new feature is required which needs to update the payment provider within our application, how can we achieve that?\\n- Answer: we have to update the source code, re-build the whole application, think of a deployment strategy to ensure service continuity of our application.\\n\\nIn the context of our monolithic application, many drawbacks are rising while changing a small piece of the system:\\n\\n- Even though the change concern only one part of the system, this one becomes indivisible and decoupled, the build and deploy process is slower because all the source code should be re-build to generate the new artifact (Java WAR file)\\n- The whole system is developed with one stack which limits the on-boarding of other developers with different backgrounds\\n- Less re-usability of the components.\\n- Increasing the artifact (build output) volume.\\n- Reliability as one bug in the ticket editing component can cause the whole system to shut down.\\n\\nIn the next section, we discuss the alternative and how microservices address many of the drawbacks of monolithic and bring new added value but also some very challenging points to handle.\\n\\n## The Microservices Architecture Style\\nMicroservices architecture style organizes the application as a set of loosely coupled, independently deployable services, Together these services deliver the functional and business\\nfeatures of the system we want to build. Let\'s continue with our Music Event Application example and try in the above illustration to define its microservices architecture:\\n\\n![author](/img/blog/implementation-view-microservices.png)\\n*The Microservices representation of our example application (Music Event Application) where 3 services communicate through HTTP using REST*\\n\\nAs we can observe in the illustration each service run in an independent process and also could have its database(recommended), Notice also how these services communicate\\nto each other, in this example, I suggest using the REST API through HTTP, but this is not the only communication option we can have, there are more such as messaging using a message broker.\\n\\n__Let\'s tackle with further detail the microservices inter-communications in a dedicated article, so far and the rest of this document we will use REST as a reference.__\\n\\n### What is a service?\\nAs the word service is a most recurrent when we explore the microservice architecture, Here is a definition:\\n> A service is an independent deployable application or software component that provides a set of functionalities accessible\\n> through an API. Service has its own logical architecture, Hexagonal architecture may fit many use-cases, In addition\\n> a service can be developed with its specific technology stack that may differ from other services\' technology stacks in a microservices architecture\\n\\n[read more about Hexagonal Architecture and alternatives in this article](./2021-10-17-software-architecture-logical-view.mdx)\\n\\n### What is loosely coupled Services and why they should?\\nTwo services are loosely coupled if changes in the design, implementation, or behavior in one __won\'t__ cause change in others. In a Microservices architecture, the coupling will happen when\\na change in one enforces an almost immediate change to one or more microservices that collaborate with it directly or indirectly.\\n\\nWhile designing Microservices architecture, to make the services the less coupling possible, consider the following points:\\n#### <span style={{color: \\"orange\\"}}>Database sharing</span>\\nthe data storage is a microservice implementation detail that should be hidden from its clients (usually other microservices). \\nIf Microservice A needs to access data of Microservice B, B should provide an API that A will use to consume the needed data\\n\\n#### <span style={{color: \\"orange\\"}}>Code Sharing</span>\\nBy definition, microservices do not share codebase, but we may want to avoid redundancy by sharing dependency libraries and\\nend up needing to update frequently in response to that libraries\' client\'s change requests. So shared code should be as minimum as possible.\\nA good practice that may seem strange at glance is to duplicate code so each service has its copy, so we need to update\\nthe library to match Service A requirements, Service B remains un-impacted \\n\\n#### <span style={{color: \\"orange\\"}}>Synchronous Communication</span>\\nIn a Microservice architecture, services cooperate to accomplish the job, so they need to communicate either asynchronously or\\nsynchronously where the service caller expects a timely response from the callee service might even block while it waits. To address the potential\\nresponse latency, we can integrate a caching mechanism or implement the [circuit breaker pattern](https://microservices.io/patterns/reliability/circuit-breaker.html) to avoid cascading failures. These two options\\ncould help remediate the system quickly, but for the long term, the best alternative is switching to asynchronous communication\\nby using a messaging broker like [Apache Kafka](https://kafka.apache.org/), So services can cooperate by publishing and consuming messages.\\n\\nWhen it comes to designing the next-generation software, relying on a strong and reliable architecture helps a lot, In\\nrecent decades, much great software conquered the market and is serving millions of users while scaling up and down to reduce\\ncost and energy or respond to an increasing number of requests. __Microservices Architecture__ is part of other practices\\nand engineering designs behind thanks to its benefits, below is a non-exhaustive list:\\n\\n- Independent development: microservices can be developed in isolation to accomplish a defined functionality\\n- Independent deployment: microservices can be deployed individually and independently in any environment (cloud, on-premise, managed infrastructure)\\n- Fault isolation: if one service fails, the system remains up and only the functionality provided by that stopped microservice will be impacted\\n- Technology stack: different programming languages, frameworks, and technologies can be used to build the same software, usually a [SaaS](https://en.wikipedia.org/wiki/Software_as_a_service)\\n- Individually scaling: each service can scale as per need, is not necessarily to scale the whole system as is the case of monolithic based  application\\n\\nDespite the number of advantages Microservices Architecture is bringing, choosing it over Monolithic Architecture relies upon\\non the context, the application domain (banking, delivery, e-commerce, ...) and scope (either is a lightweight application or\\na complex evolving application), your organization software engineering capabilities and culture.\\n\\n----\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)\\n* [Microservice Patterns by Chris Richardson](https://microservices.io)"},{"id":"software-architecture-logical-view","metadata":{"permalink":"/blog/software-architecture-logical-view","source":"@site/blog/2021-10-17-software-architecture-logical-view.mdx","title":"Software Architecture: The Logical View","description":"author","date":"2021-10-17T12:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"4+1","permalink":"/blog/tags/4-1"},{"inline":true,"label":"logical view","permalink":"/blog/tags/logical-view"}],"readingTime":4.315,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-logical-view","title":"Software Architecture: The Logical View","date":"2021-10-17 12:49:31 +0100","authors":["reda"],"tags":["software","architecture","4+1","logical view"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The Implementation View","permalink":"/blog/software-architecture-implementation-view"},"nextItem":{"title":"Software Architecture: The 4+1 view model","permalink":"/blog/software-architecture-the-4-plus-1-model"}},"content":"![author](/img/blog/logical-view.jpeg)\\n[photo source](https://dz2cdn1.dzone.com/storage/article-thumb/8685724-thumb.jpg)\\n\\n![The 1+4 Model View](/img/blog/1plus4model-logical-view.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\n\\n##  The layered architecture style\\nThis is my first architecture style I\'ve discovered 10 years ago thanks to my java enterprise application course teacher, Ths idea\\nconsist of organizing the elements of an application into layers. Those elements could be java classes grouped by the responsibility type\\nthey manage and respect the rule that each layer should depend only on the layer below it, Another version also tolerate that a layer can\\ndepends on the any of the layers below it.\\n\\nEven though we can apply this architecture style to any of the 4 model view we\'ve seen above, It is most likely to be used in the logical view\\nas follows:\\n\\n* __Presentation layer__: groups classes & interfaces that handle the UI interactions, Such as desktop application UI that handles user interactions like Click, Press, etc...\\n* __Business logic layer__: contains classes where we implement the business logic of the system. For example classes that calculate the shortest route for delivering merchandise from stock house to customer.\\n* __Persistence layer__: contains interfaces and classes that interact with database or file system. For example classes that communicate with a MySQL database.\\n\\n![3 Tier Java Application Architecture](/img/blog/n-tier-architecture-style-java.jpg)\\n<i>In the above figure, we illustrate the 3 tier architecture for a java application, classes of the same layer are grouped using packages.Note that architecture is beyond\\nany programming language, so for example in case of a C# application we group classes in namespaces instead of packages for java.</i>\\n\\nThe years go by and the software development community began to recognize some drawbacks of N Tier architecture, below we list some of them:\\n\\n- __Single Presentation Layer__: With the evolution of the web and mobile applications, many systems provide the same functions, For example a desktop application\\n    for logistics providing the feature of calculating the shortest route and cost of a delivery, While the business logic remains the same, \\n    the interactions with the system are evolving with mobile and web users.\\n- __Single Persistence Layer__: Modern systems needs to interact with many and/or different storage systems rather than one database.\\n- __Layer dependencies__: As the business logic depends on the persistence one, we are prevented from testing the business logic in an isolation.\\n\\nThese disadvantages lead to an alternative architecture style we present next.\\n\\n## The Hexagonal Architecture Style\\nThis architecture style organizes the logical view in a way that puts the business logic at the center. In contrast to the layered\\narchitecture that has a presentation layer, we have here one or more inbound adapters that handle requests from the outside by invoking\\nthe business logic. The same applied to the persistence layer, the application has or more outbound adapters that are invoked by the business logic and invoke external applications.\\nThe main characteristic of this architecture style is that the business logic doesn\'t depend on these adapters, instead they depend on it.\\nThe Business logic has one or more ports.A __port__ defines a set of operations and is how the business logic interacts with\\nwhat\'s outside it. For example in java these ports are a Java Interface. we distinguish inbound and outbound ports. An inbound port is an API exposed by\\nthe business logic, which enables it to be invoked by external applications, for example a REST API.An outbound port is how the business\\nlogic invokes external systems like Database Access Repositories.\\n\\nLike the ports there are inbound and outbound adapters. An inbound adapter handles requests from the outside world\\nby invoking an inbound port. For example in the case of a Java Web Application using Spring framework, An inbound\\nadapter is a Rest Controller that will invoke inbound port exposed by the business logic.\\nAn outbound adapter implements an outbound port and handles requests from the business logic by invoking an external\\napplication or service.An example of an outbound adapter is an Event Publisher to Kafka or any other Event streaming system.\\n\\n![Hexagonal Architecture](/img/blog/hexagonal-architecture.jpeg)\\n\\n*The Figure above shows an example of the hexagonal architecture where the business logic has one or more adapters to communicate with external systems*\\n\\nLet me remind you that decoupling the business logic from the presentation and data access is the important benefit\\nof the hexagonal architecture style. This is very useful also when it comes to testing as you can use <abbr title=\\"Test Driven Development\\">__TDD__</abbr>\\neasily as you can test your business logic in an isolation.It also defines new model for the modern applications where the \\nbusiness logic can be invoked by multiple adapters each one of them invokes an external system.\\n\\n> The Hexagonal Architecture style is well fit to define the architecture of each service in a microservice architecture.\\n\\nBoth the layered and hexagonal architectures are a set of constraints and rules on how elements within the logical\\nview are connected and how they communicate.\\n\\n----\\n\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)"},{"id":"software-architecture-the-4-plus-1-model","metadata":{"permalink":"/blog/software-architecture-the-4-plus-1-model","source":"@site/blog/2021-09-18-software-architecture-the-4-plus-1-model.mdx","title":"Software Architecture: The 4+1 view model","description":"author","date":"2021-09-18T12:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"system design","permalink":"/blog/tags/system-design"}],"readingTime":3.615,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-the-4-plus-1-model","title":"Software Architecture: The 4+1 view model","date":"2021-09-18 12:49:31 +0100","authors":["reda"],"tags":["software","architecture","system design"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The Logical View","permalink":"/blog/software-architecture-logical-view"},"nextItem":{"title":"DevOps: Strengthen your digital transformation","permalink":"/blog/devops-strengthen-your-digital-transformation"}},"content":"![author](/img/blog/software-architecture-play-with-bricks.jpeg)\\n[photo source](https://holition.com/play/ycn-s-lego-serious-play-workshop)\\n\\n# What is Software Architecture?\\n__The software architecture of a computing system is the set of structures needed to reason about the system, which \\ncomprise software elements, relations among them, and properties of both.__\\n<u>by SEI</u>\\n\\nWe can decrypt the above definition as structuring a system as a whole recessed block into parts connected, complementary and modular.\\nThe more these parts are decoupled and can work independently, and communicate to each other effectively the more our architecture\\nwill fill its mission to ensure a maintainable, extensible and homogeneous system.\\n\\n# The 4+1 view model of software architecture\\nLike a building, there are different plans and maps that can describe different the different perspectives of that building,\\nwe have the electrical, plumbing, structural and others. This is exactly how the 4+1 view model defines software architecture\\nin the paper published by [Phillip Krutchen](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n\\n![The 1+4 Model View](/img/blog/1plus4model.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\nEach of the four views has a well-defined purpose as detailed below:\\n## Logical View\\nIt consists of the source code written by developers, in the context of an oriented programming language like Java, the elements are\\nclasses and packages, in addition to relationships between them such as inheritance, association, and composition...\\n\\n## Implementation View\\nIncludes the result of the build process that can be run or deployed such as a Java JAR or Node.js Package. These interact with each\\nother in the form or a composition or dependency relationship.\\n\\n\\n## Process View\\nRefer to the process holding and running either in virtual machines or containers like docker, relations between them is called\\ninter-process communication.\\n\\n## Deployment View\\nRepresents the map of the physical or virtual machines where the system is executed and running, also describes the communication\\nat level through the network. For example this view can be a VPC with all the routing configuration inside this network and between it and the internet.\\n\\n# Why an application architecture is relevant?\\nAn application come to life with the purpose of solving a problem, to do so it needs to fulfill two types of requirements, Functional requirements\\nthat defines what the application should do, Previously defined in the form of specifications, with the __agile__ edge we define them as __user stories__,\\n__use cases__, or events. we can start coding immediately and produce an application that respond to these requirements without thinking about architecture.\\nBut when it come to develop a reliable, maintainable and extensible system, Architecture is our core activity because it helps us\\nanswer questions regarding how the system behaves with millions of users at the same time, __security threats__ and __delivery time__.\\n<span style={{color: \\"purple\\"}}>__Architecture meets quality requirements__.</span>\\n\\n# Architecture Styles\\nI found the definition given by David Garlan and Mary Shaw in their publication titled [An Introduction to Software Architecture](https://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf)\\nan amazing reference to understand the concept of architecture styles and how it can be view in the field of computing systems.\\n\\n>An architectural style, then, defines a family of such systems in terms of a\\npattern of structural organization. More specifically, an architectural style\\ndetermines the vocabulary of components and connectors that can be used in\\ninstances of that style, together with a set of constraints on how they can be\\ncombined. These can include topological constraints on architectural\\ndescriptions (e.g., no cycles). Other constraints\u2014say, having to do with\\nexecution semantics\u2014might also be part of the style definition.\\n\\nFollow are the questions shared by these two pioneers in the discipline of software architecture, answering these questions\\nwill remarkably help define the architecture that fit for the system we\'re building:\\n \\nGiven this framework, we can understand what a style is by answering the\\nfollowing questions: __What is the structural pattern__,__the components__,\\n__connectors__, and __constraints__? What is the underlying computational model?\\nWhat are the essential invariants of the style? What are some common\\nexamples of its use? What are the advantages and disadvantages of using that\\nstyle? What are some common specializations?\\n\\nin the next part, let\'s explore some of the most known architecture styles\\n[Logical View](./2021-10-17-software-architecture-logical-view.mdx)\\n\\n----\\n\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)"},{"id":"devops-strengthen-your-digital-transformation","metadata":{"permalink":"/blog/devops-strengthen-your-digital-transformation","source":"@site/blog/2021-07-10-devops-strengthen-your-digital-transformation.mdx","title":"DevOps: Strengthen your digital transformation","description":"author","date":"2021-07-10T10:49:31.000Z","tags":[{"inline":true,"label":"devops","permalink":"/blog/tags/devops"},{"inline":true,"label":"agile","permalink":"/blog/tags/agile"}],"readingTime":6.275,"hasTruncateMarker":true,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"devops-strengthen-your-digital-transformation","title":"DevOps: Strengthen your digital transformation","date":"2021-07-10 10:49:31 +0100","authors":["reda"],"tags":["devops","agile"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The 4+1 view model","permalink":"/blog/software-architecture-the-4-plus-1-model"},"nextItem":{"title":"Software testing from separate activity to core development","permalink":"/blog/software-testing-from-separate-activity-to-core-development\\""}},"content":"import \'./styles.css\';\\n\\n![author](/img/blog/devops-strengthen-your-digital-transformation.jpeg)\\n[photo source](https://www.sdxcentral.com/cdn-cgi/image/w=748,h=399,fit=scale-down,f=auto,q=85/https://www.sdxcentral.com/wp-content/uploads/2018/10/Cloudera-Hortonworks-Merge-Their-Big-Data-Efforts.jpg)\\n\\n\\nNowadays the processes used to create software have been considerably evolved from manual and human interaction to test,\\nbuild and deploy an application to a fully automated process relying on new practices and tools that help teams to \\ndeliver an update to production in few minutes or even seconds.\\nIf your organization or team still using the old methods and have the willingness to take a step toward these useful\\nand helpful DevOps practices, there are some notions to consider while taking the way.\\n\\n\x3c!-- truncate --\x3e\\n\\n# DevOps: Development and Operations fusion\\nDevOps aims at merging or combining the software development and IT operations to accelerate software delivery while ensuring high quality and secure systems.\\nwith the adoption of agility, a team could respond to customer requirements rapidly without suspending the production environment. I would like to sum up these concepts as follow:\\n\\n   - Development and operations teams are merged into one single team where all members contributing to make\\n     the app ready to use, from dev, and test to deployment.\\n   - Product Owner and other functional roles are concerned by DevOps practices, they decide and act from feature\\n     development to application production deployment. \u200b\\n\\nBefore detailing the concepts and practices of DevOps, let\'s share some of the key benefits of either a company or an open community\\ndeveloping a product can gain.\\n\\n<div class=\\"row\\">\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Speed</h3>\\n      <p class=\\"card-content\\">Increase your velocity for faster innovation and market-changing responding by releasing updates quickly</p>\\n    </div>\\n  </div>\\n\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Delivery</h3>\\n      <p class=\\"card-content\\">Reducing the delivery time to provide customer with new features and fixing bugs quickly</p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Security</h3>\\n      <p class=\\"card-content\\">\\n      Respond and deliver quicker without losing control on quality and compliance, by including automated quality and security checking\\n      </p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Reliability</h3>\\n      <p class=\\"card-content\\">Manage your development, test and production environment in a managed manner to test that every changes or updates is functional so the end user is always provided with a reliable product </p>\\n    </div>\\n  </div>\\n</div>\\n\\n## DevOps practices\\n# Continuous Integration\\nToday chances that software is writing by more than one person are higher contrary to the shining start of the Linux story who was\\ncreated first by Linus Torvalds as a personal project. To merge code writing by different members we use the continuous integration\\nwhich is a simple idea about committing code frequently to a shared central repository on a server, then an automated conflicts resolving,\\ntest and build are triggered, this practice keeps developers focused on writing code for new features rather than debugging code merging issues\\nToday the market is full of different products that we can rely on for managing source code and continuous integration, the most famous\\nare:\\n\\n- [Github](https://github.com/)\\n- [Gitlab](https://gitlab.com)\\n- [AWS CodeCommit](https://aws.amazon.com/codecommit/)\\n- [BitBucket](https://bitbucket.org/)\\n- [Google Cloud Source Repositories](https://cloud.google.com/source-repositories)\\n\\n# Continuous Delivery\\nTime to market is a key factor many businesses usually is taking into consideration, they were always interested in how to\\ntest an idea ASAP and put that product or service in customer\'s hand and gather a quick feedback. To collect a reliable\\nfeedback and analysis how the user interact with the software there is a need to provide it in a real production environment.\\nContinuous Delivery also known as CD respond to this requirement and more through the adoption of a set of practices and tools\\nthat they will help your organization to automatically build, test and deploy a new version or small change to production\\nrapidly.\\nFind below some of the most used CI/CD platforms:\\n\\n- [Github Actions](https://github.com/features/actions)\\n- [Gitlab CI/CD](https://docs.gitlab.com/ee/ci/)\\n- [AWS CodePipelines](https://aws.amazon.com/codepipeline/)\\n- [CircleCi](https://circleci.com/)\\n- [Google Cloud Source Repositories](https://cloud.google.com/source-repositories)\\n\\n## More than CI/CD\\nWhile the continuous integration and delivery remain the most known practices of DevOps, There are others not less important\\nand should be implemented and adopted to have a standard compliant Workflow as illustrated in the following drawing:\\n![DevOps Workflow](/img/blog/devops-workflow.jpeg)\\n\\nOnce a change or new feature has been deployed, we need to operate on, to configure for example an endpoints or enable\\nthat feature using a distributed configuration system. Then we need to monitor so see how the a deployment impacts the \\nuser experience and performances. Automated the monitoring and capturing logs from the application, analyzing them in order\\nto ensure a 24/7 service availability.\\n\\nThe following cards describe some necessary practices to consider too while promoting a DevOps culture and deploying the\\ntools.\\n \\n<div class=\\"row\\">\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Microservices</h4>\\n      <p class=\\"card-content\\">Microservice architecture aims at decomposing a complex application into modules developed and understood by different people</p>\\n    </div>\\n  </div>\\n\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Infrastructure as Code</h4>\\n      <p class=\\"card-content\\">is a practice in which infrastructure is provisioned and managed using code and software development techniques</p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Monitoring and Logging</h4>\\n      <p class=\\"card-content\\">\\n      Applications logs and data are collected and analyzed, and infrastructure metrics are monitored to trigger scaling up/down\\n      or respond to an unexpected event.\\n      </p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Communication</h4>\\n      <p class=\\"card-content\\">Merging development and operations efforts requires a good and seamless communication and collaboration, we can rely  on different channels like chat apps and tracking-systems</p>\\n   </div>\\n  </div>\\n</div>\\n\\n# Example: How microservices and DevOps can be implemented together to transform an application?\\nWith the adoption of microservices architecture, your pipeline could take another structure, in the following example\\nwe illustrate an old and a modern pipeline for an hotel booking application:\\n__Booking Application__ is an application that cover mainly 3 modules as follow:\\n\\n![Hotel Booking Application](/img/blog/hotel-booking-app-pipleline-v1.svg)\\n*The large Hotel Booking App team commits their changes to a single source code repository. The path from code to production is long and onerous and involves manual intervention*\\n\\nNow let\'s discover how ce can transform our hotel booking application to make it easily extensible, maintainable and continuously\\nupdated. We will decompose the monolithic application into small loosely coupled services, and put in place a modern pipeline\\nto help us respond rapidly to new requested changes and deliver quicker new versions. The figure below demonstrate the new application\\narchitecture and pipeline structures:\\n\\n![Hotel Booking Application](/img/blog/hotel-booking-app-pipleline-v2.svg)\\n*The microservices-based application consists of a set of small, decoupled services, developed, tested and deployed independently thanks to a fully automated CI/CD*\\n\\n---\\n\\n\\n**NOTE**\\nIn the above figure, we mention gitlab CI/CD as our continuous integration and deployment platform.We can use\\nany other combination of DevOps tools from the ones listed in previous paragraphs. \\n\\n\\nFinally, I would like to share my thoughts about DevOps, First of all is all about a culture, a change that the organization should be prepared for, I\u2019m think about people within our teams who are comfortable with old processes to deliver software, we should walk with them side by side during the promotion phase to help them understand and believe in the benefits they can gain with these new ways of creating software.\\n\\nThe second point is about the tools, today there are plenty of DevOps tools we can choose from, In my point of view having a whole one platform that provides implementations for major needed tools is extremely recommended such as CI/CD, tracking systems, code source repository, etc\u2026\\n\\nThe last point is about the word \\"continuous\\" because once we put in place these DevOps tools and spread the practices we think that the job is done but is all about continuous improvement and surely new issues will be faced and we need to be prepared to analyze and solve them again, this what engineering is about.\\n\\n----\\n* [AWS DevOps](https://aws.amazon.com/devops/what-is-devops/)\\n* [Microservices Patterns by Chris Richardson](https://www.manning.com/books/microservices-patterns)"},{"id":"software-testing-from-separate-activity-to-core-development\\"","metadata":{"permalink":"/blog/software-testing-from-separate-activity-to-core-development\\"","source":"@site/blog/2021-03-06-software-testing-from-separate-activity-to-core-development.mdx","title":"Software testing from separate activity to core development","description":"author","date":"2021-03-06T12:56:31.000Z","tags":[{"inline":true,"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":5.145,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-testing-from-separate-activity-to-core-development\\"","title":"Software testing from separate activity to core development","date":"2021-03-06 12:56:31 +0100","authors":["reda"],"tags":["testing"]},"unlisted":false,"prevItem":{"title":"DevOps: Strengthen your digital transformation","permalink":"/blog/devops-strengthen-your-digital-transformation"},"nextItem":{"title":"Mentoring a new junior teammate from day 1 to","permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to"}},"content":"![author](/img/blog/software-testing-from-separate-activity-to-core-development.jpeg)\\n[photo source](https://www.railwaysignalling.eu/istanbul-ankara-high-speed-railway-aims-to-open-in-february2014/cropped-b-broshure-forside4-jpg)\\n\\nI remember these days when we used to write testing code after implementing the software features to make sure\\nthat the code is working, avoid bugs. Besides, we create some scripts to automate interactions with the program.\\n\\nWriting testing code was a separate activity from programming.\\n\\n# Agile redefine our testing philosophy\\n\\nWhen Agile was born in early 2000 as the fruit of a working group including Martin Fowler, The manifesto defines how agile methods\\nwill speed up the software development to bring new products to market faster. The testing activity starts taking a new\\ndefinition from a side part activity to undistinguished work of software development, Especially with \\nthe Xtreme programming method that takes the TDD as its core paradigm. We will cover in further detail the TDD in a\\ndedicated section below, but first, let\'s review the different types of tests.\\n> NB: there are plenty of test types we can code and run, in this post, I share with you only the main ones\\nfrom a developer\'s perspective. Below is a non-exhaustive list of test types:\\n\\n- Functional testing\\n- Load and stress testing\\n- Usability testing\\n- Security and Vulnerability testing\\n- Monkey testing\\n\\n## Unit tests\\nThis type of software testing covers small and isolated components of software to make sure they behave as expected,\\nNowadays these code fragments are writing by the developer itself while implementing the product\'s features. There are some\\nproperties that these tests should hold\\n- They should be fast.\\n- Run frequently as part of the continuous integration process, so they are executed after each commit.\\n- They need to be readable, Maintainable, and Trustworthy.\\n    \\n## Integration tests\\nThe main role of this type of test is to confirm that the independently developed components that compose an application\\nor a system are working as expected together. For example in a Layered architecture-based application, you may want to make\\nsure that your DAO or Repositories are working fine, or verify the web layer interactions with the business layer are matching\\nthe desired behavior, here where the integration tests come to.\\n\\nIntegration tests may cover a variety  of scenarios, here are some common ones:\\n- Testing 2 or more components interactions and data flow\\n- Verify the data sent by a component is well-formatted by another one before processing it.\\n- Verify components handle cases where they lost connectivity between them.\\n    \\n## End to End Tests\\nThey may take also the name of broad-stack tests or full-stack tests, Despite their slow time of execution they constitute\\nan important value for the product\'s quality as they test the behavior of the application in a real environment.\\nThey are intended to reproduce the end-user interaction with the product and make sure that every feature is responding as it what designed.\\nThese tests have the advantage of testing the software with all its parts connected, on the other hand, they have the\\npain of slower to run and difficult to maintain, the reason why it\'s recommended to reduce the number of these tests compared to \\nunit or integration ones as shown in the following figure:\\n\\n![the test pyramid](/img/blog/test-pyramid.png)\\n\\n# TDD: Test Driven Development\\nSince its apparition there is many books have been published, I recommend reading one or more to understand this philosophy is deep and acquire\\nsolid skills for writing tests, Here is my must-read <span>**Test Driven Development By Example**, __Kent Beck__ </span>\\n\\n>I\'ll define TDD as a programming style in which production and test code are written together, with the production code\\n> just after test one.\\n\\nBy now we have described the TDD, there are some rules to take into consideration:\\n- Rule one:     We don\'t write production code before we\'ve written a failing test.\\n- Rule two:     We don\'t write additional tests than sufficient to implement our first scenario of a use case.\\n-  Rule three:   We don\'t write more production code than needed to pass the currently failing test.\\n    \\nAs the TDD is relatively becoming a mature discipline, it started encouraging further innovations derived from it, such as BDD\\nwhose main goal is to get developers, testers, and people from the business to talk to each other. In other words \\n> the real intent is to try and work out what your customer or business wants from the software before you start working on it\\n\\nOnce we adopt the TDD and start working this way with testing side by side with production code, we\'ll write many tests\\nper use case or (feature), and more by component and you can imagine the numbers of lines we\'ll end up with,\\nmanaging tests code became as important as production one. I encourage you to keep tests clean.\\n__what makes a test clean__? Readability, shortness, and expressive. The following snippet shows an example of a test written\\nwith the intention to make it clean, but surely the is no perfect example to follow, just keep in mind to give your test code your attention.\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    // given a booking id\\n    BookingId bookingId = \\"48e58688-adc2-4e3d-be9d-f5129723b351\\";\\n\\n    // when\\n    Either<AcceptBookingError, BookingResponse> either = acceptBookingUseCase\\n                                                          .accept(bookingId);\\n\\n    // then\\n    assertThat(either.get().getStatus()).isEqualTo(BookingStatus.ACCEPTED);\\n  }\\n```\\nThere is another concept that makes our tests more readable, convenient, and easier to maintain, **Domain-Specific Testing Language**\\nThe idea is to create a set of functions and utilities to hide the details of the implementation of your test, the example above we can write\\nit this way\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    giving()\\n        ._a_bookinId()\\n    .when()\\n        .we_accept_a_booking()\\n    .then()\\n        .the_booking_should_has_accepted_status();\\n  }\\n```\\n\\nAs described by __Robert Martin__ in his book __Clean Code__ a clean test follow other rules that form the F.I.R.S.T acronym\\n\\n    - Fast: Tests shoud be fast\\n    - Independent: Tests should not depend on each other\\n    - Repeatable: Tests should be repeatable in any environment\\n    - Self-Validating: The tests should have a boolean output\\n    - Timely: Tests should be written before production code.\\n    \\nFinally, we want to think about tests as the compass to reach our destination which is the final secure, viable, and high-quality product we build.\\n\\n----\\n* [Martin Fowler\'s blog](https://martinfowler.com/testing/)\\n* [Clean Code Book by Robert C.Martin](https://www.pearson.com/us/higher-education/program/Martin-Clean-Code-A-Handbook-of-Agile-Software-Craftsmanship/PGM63937.html)\\n* [Cucumber Blog](https://cucumber.io/blog/bdd/intro-to-bdd-and-tdd/)\\n* [Agile Alliance](https://www.agilealliance.org/glossary/tdd/)"},{"id":"mentoring-a-new-junior-teammate-from-day1-to","metadata":{"permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to","source":"@site/blog/2020-09-01-mentoring-a-new-junior-teammate-from-day1-to.mdx","title":"Mentoring a new junior teammate from day 1 to","description":"author","date":"2020-09-01T07:56:31.000Z","tags":[{"inline":true,"label":"team","permalink":"/blog/tags/team"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"share","permalink":"/blog/tags/share"}],"readingTime":6.42,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"mentoring-a-new-junior-teammate-from-day1-to","title":"Mentoring a new junior teammate from day 1 to","date":"2020-09-01 07:56:31 +0100","authors":["reda"],"tags":["team","collaboration","share"]},"unlisted":false,"prevItem":{"title":"Software testing from separate activity to core development","permalink":"/blog/software-testing-from-separate-activity-to-core-development\\""}},"content":"![author](/img/blog/mentoring-a-new-junior-teammate-from-day1-to.jpeg)\\n[Photo by Ian Schneider](https://unsplash.com/photos/PAykYb-8Er8)\\n\\n# Teaching in my mind \\nI always love my parents\' job, I grew up in a family of two teachers, later my dad became a school principal. They were\\nsharing every day their experiences, funny situations with students, and emotions. In addition to all this\\n information about teaching, I retain one thing that I feel it\\n > Teaching others is such a satisfying feeling, especially if you can observe their progression along the time\\n\\nthese concepts were carved in my subconscious mind since then. I remember in mid-high school I went to ask about a\\n course in a private school, After introducing my self the principal proposed to me teaching Adobe Photoshop and web\\n  concepts, Without diving into the details of this journey, I do appreciate it.\\n  \\nTime passes and I find myself several times in the shoes of a teacher, the story I share in the next paragraph is\\n quite different from teaching, but has many similarities I wanted to write down.\\n \\n# Mentoring someone, who decided?\\nIn a company, this approach may be part of its culture, So the HR team once they hire a new joiner, they ask a\\n senior who wants to play the role of mentor, certainly this is a voluntary decision and not a hierarchical one, as mentoring requires first of all the initiative and passion to do it.\\n  This is not a work task to complete, this is a\\n   mindset to share with love.\\n   \\nRegardless of having this culture or not, in many cases, a spontaneous relationship between a senior and a new team\\n-member took place, mainly due to their personalities rapprochement. Then we begin to talk about mentoring as the\\n senior introduces his new team-mate to other teams, lets him discover departments, work methods, and any knowledge\\n  that may help him be  well integrated.\\n  \\n# What should we have to succeed in a mentoring program?\\nIn my opinion, we need to behave like coach  and trainee, or like teacher and student. As a mentor, Having this\\n passion for knowledge sharing, feeling so satisfied while seeing others growing up, Being generous when it comes to\\n  advising and guiding are all \\"must-have\\" values we believe in. Regarding skills, we need to be good in\\n   communication, the capacity of thought, and patience.\\n  \\n  On the other side, the trainee needs some skills, or call them behaviors like being good\\n   listener, a hungry man who wants to enrich his knowledge by asking for details, but certainly without disturbing\\n    the mentor, Because this one is meanwhile an employee with tasks and missions to complete, So as a trainee we keep\\n     calm and patient when we don\'t have some information or answers immediately. For the trainee the mentoring\\n      should represent an opportunity to know more, have different points of view, but in any case should impact\\n       our analysis capabilities, and influence our decision-making, we have to protect our autonomous which is\\n        the most valuable goal we target. \\n\\n# Day 1\\nI\'ve been delighted to welcome with my team our new colleague who has just graduated and he is today starting his\\n first job as a software engineer. I took him for a short tour to discover the office, the facilities, and our\\n  beautiful kitchen corner where often we share coffee time.\\nI think the first impression is very important the reason why my team and I gave it all our intention to make it at\\n the same time funny and useful for our team-mate. We wanted to help him feel very comfortable. For today apart\\n  from receiving his laptop and tools no code or pull request.\\n \\n# Day 2 \\nA short introduction to explain the project views, our work methods, and collaboration best practices we believe in\\n within our entity. As a software engineer focusing on technical staff, I suggested putting our junior colleague in\\n  touch with our scrum master for the purpose to learn about agility, how we use SCRUM as a reference with all its\\n   rituals from daily stand up to sprint retrospective.\\n   \\nNow it\'s coffee time, a good moment to show him an important value within our company, generosity especially when it\\n comes to knowledge, we believe that sharing is such a powerful value that helps all of up to grow up together and\\n  progress whatever our field of expertise. Although everyone has a clear and well-defined role within the team, being\\n  aware of what others are doing is crucial cope with any absence or unavailability.\\n\\n# Day 3\\nOur new colleague is very motivated and curious, his questions are dept and constructive, but unfortunately, I could\\n not answer all of them immediately, I let him know that he can also email me and I\'ll answer him later once I finish\\n  a prioritized task. The lesson here is very simple, a question may be answered later but should never end up\\n   without any response. To avoid any confusion or lack of trust that may affect my relationship with my junior\\n    colleague. \\n   \\n# Day 4\\nCollaboration over delegation is what happens when we have less time to explain or teach someone else how to complete\\na task or do a job, but this approach is too bad. As a mentor, I prefer to collaborate with trainees walking together\\nside by side armed with passion and patience with one goal: helping him being autonomous instead of completing tasks\\nfor him quickly no matter how much time will take, training others is always a pleasure and a must-have for a mentor.\\nA mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n> A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n    \\n# Day 5\\nAre you a good listener? I was convinced as a mentor I need to listen a lot to my trainee, give him all the time to \\nexplain his point of view or vision even though I\'m not okay with or I\'m not sure he is not on the right way, keep calm\\nand let him finish, I see many colleagues when a junior comes with a new idea, or an initiative, they quickly try \\nto crop believing that is it a wast time, Unfortunately, this behavior may dramatically degrade a junior\u2019s \\nself-confidence and his motivation for future initiatives.\\n   \\n#  Next Day\\nThe days go by one after the other and I\u2019m getting so happy to see our team growing up and how our new junior colleague\\nis taking over subjects and becoming autonomous, This trusted and honest relationship we built together is bringing\\nwhat is expected to be. I do believe that mentoring someone else is nothing other than giving him the right \\nand the necessary tools to dive alone with confidence into any subject. This friendly relationship helps us learn\\nfrom each other, I do appreciate supporting my colleague during his first days within our team and in the company.\\nHis questions, exchanges, and remarks let me learn how to communicate and explain my ideas and point of view at a \\nlow level using simple and easy expressions to understand when talking to a debutant person or someone outside of \\nmy field of expertise.\\n   \\n# It\'s been a constructive journey\\nAlong the way, I learned a lot of things and values I would like to summarize below:\\n\\n    * Stay humble when you talk to junior or debutant people.\\n    * There is always something to learn from others whatever their expertise level.\\n    * Share and publish your knowledge to help serve and improve yourself and others.\\n    * Gain respect and recognition\\n    \\n*publish, share, exchange to help serve, shape and improve the world*"}]}}')}}]);