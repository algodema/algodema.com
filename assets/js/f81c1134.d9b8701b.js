"use strict";(self.webpackChunkalgodema=self.webpackChunkalgodema||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"designing-and-implementing-microservices-with-ddd-and-hexagonal-architecture.mdx","metadata":{"permalink":"/blog/designing-and-implementing-microservices-with-ddd-and-hexagonal-architecture.mdx","source":"@site/blog/2022-10-02-microservices-from-design-to-implementation-with-ddd-and-hexagonal-architecture/2022-10-02-microservice-from-design-to-implementation-with-ddd-and-hexagonal-architecture.mdx","title":"Designing and Implementing Microservices with DDD and Hexagonal Architecture","description":"Use case","date":"2022-10-02T15:12:03.000Z","tags":[{"inline":true,"label":"hexagonal architecture","permalink":"/blog/tags/hexagonal-architecture"},{"inline":true,"label":"ddd","permalink":"/blog/tags/ddd"},{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"}],"readingTime":11.315,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"designing-and-implementing-microservices-with-ddd-and-hexagonal-architecture.mdx","title":"Designing and Implementing Microservices with DDD and Hexagonal Architecture","date":"2022-10-02 15:12:03 +0100","authors":["reda"],"tags":["hexagonal architecture","ddd","microservices","clean code"],"id":"bmwhaad"},"unlisted":false,"nextItem":{"title":"Clean code: Write The Code You Want To Read (Part 2)","permalink":"/blog/clean-write-the-code-you-want-to-read-part2"}},"content":"![](/img/blog/build-microservice-with-hexagonal-architecture-and-ddd.png)\\n\\n# Design\\n\\n## Use case\\n\\nIn this phase, we begin by collecting requirements from a business perspective to ensure a thorough understanding of the objectives. Once these requirements are established, we then investigate how architectural patterns and software development methodologies can be utilized to construct the product effectively.\\n\\n> Currently, local grocery stores must either visit large distribution companies or contact them individually to inquire about pricing, stock availability, and delivery schedules when placing orders. This process is time-consuming and inefficient for grocery managers.\\n> To address this challenge, we propose developing a platform that enables managers to easily check prices, view stock levels, place orders, and track deliveries in one streamlined solution.\\n\\n## Personas and User Journey\\n\\nTo develop a system that effectively tackles the relevant challenges and provides significant value, it is imperative that every aspect of the system is designed with users in focus. This makes it vital to thoroughly understand their frustrations, motivations, and expectations regarding the new product we are creating\\n\\n- **Grocery Manager**\\n  - **Profile:** Typically has a bachelor\'s degree.\\n  - **Frustrations:** Running out of stock, lack of visibility over deliveries, price comparison is a time-consuming task.\\n  - **Motivations:** Save management time, focus on customer relationships and service quality, ensure stock levels are always adequate.\\n\\n# Architecture & Design\\n\\nIn the previous section, we presented a brief overview of the business domain, requirements, and one of the system\'s future users. At this stage, we need to make architectural and design decisions.\\n\\n## Architectural Style\\n\\nWhile the brainstorming outputs for this example are somewhat limited, we can easily envision various services, such as Order Service, Provider Service, Delivery Service, and Product Service. Now, suppose we want to develop all these services simultaneously, with different teams specializing in distinct technology stacks. It is essential that these services remain decoupled from one another, ensuring that a change in the design of one service does not affect the others.\\n\\nRegarding deployment, we aim to deploy the Product Service before the others to deliver value as quickly as possible. This necessitates that the services be independently deployable and scalable.\\n\\nBy organizing our product around services, we can enhance fault tolerance. For example, if the Delivery Service is unavailable, users should still be able to access other services. For these reasons, we believe that a microservices architecture is the most suitable architectural style for this project.\\n\\nRegarding deployment, we aim to deploy the Product Service before the others to deliver value as quickly as possible. This requires that services be independently deployable and scalable.\\n\\n## Domain Design\\n\\nThe complexity of the business domain, the rules, and the number of services (system components) lead us to consider Domain-Driven Design (DDD). So, what is DDD?\\n\\n:::info\\n\\nDDD, as described in the excellent book _Domain-Driven Design_ by Eric Evans (Addison-Wesley Professional, 2003), is an approach to building complex software applications that is centered around developing an object-oriented domain model.  \\nA domain model captures knowledge about a domain in a form that can be used to solve problems within that domain.\\n\\n:::\\n\\nIn traditional object-oriented design, a domain model is a collection of interconnected classes. For example:\\n\\n![Figure 1](algodema_blog_bmwhaad_fig1-2024-09-29-210114.svg)\\n\\n_Figure 1: Object Oriented Domain Model_\\n\\nWith this design, operations such as loading or deleting an Order object encompass more than just the Order itself; they also involve related data, such as order items and delivery details. The absence of clear boundaries complicates updates, as business rules, imagine a business logic such as \\"minimum order amounts\\" must be enforced meticulously to preserve invariants\\n\\nThis is where DDD can help, by using Aggregates\\n\\n> An aggregate is a cluster of domain objects within a boundary that can be treated as a unit\\n\\nFigure 2 shows a simplified version of the domain model aggregates. Designing domain model using the DDD Aggregate pattern recommand that aggregates match a set of rules: 1. Reference only the aggregate root 2. Inter-aggregate references must use primary keys 3. One transaction creates or updates one aggregate\\n\\n![Figure 2](algodema_blog_bmwhaad_fig2-2024-09-29-210501.svg)\\n\\n_Figure 2: Domain Model Aggregates Simplified_\\n\\n# Implementation\\n\\nNow that we have designed the domain model aggregates and the achitecture implementation view **Microservices**, let\'s dive into the architecture logical view **Hexagonal Architecture** , please refer to this post to learn about\\n[Architecture Implementation view, Hexagonal option and why we adopt it](/blog/2021-10-17-software-architecture-logical-view.mdx#the-hexagonal-architecture-style)\\n\\nI\'m going to use Kotlin as programming language and maven as a build tool\\n\\n### Pilot feature\\n\\n## Bootstrap the project\\n\\nLet\'s consider the following feature: place order\\n\\n> As a grocery manager, I need to place an order for a product so I can provision the stock\\n> Constraint 1: The minimum order quantity is 20.\\n\\nUsing maven build tool, let\'s create a project for kotlin.\\n\\n    1. create a maven project using the following cmd:\\n\\n    ```shell\\n        mvn archetype:generate \\\\\\n        -DgroupId=com.algodema \\\\\\n        -DartifactId=grocery-marketplace-order-service \\\\\\n        -DarchetypeArtifactId=maven-archetype-quickstart \\\\\\n        -DarchetypeVersion=1.4 \\\\\\n        -DinteractiveMode=false\\n    ```\\n\\n    2. convert the project to kotlin by replacing the src/main/java and src/test/java directories with src/main/kotlin\\n    3. modify pom.xml for Kotlin, JUnit, and AspectJ\\n    4. checkout the project on github: (https://github.com/algodema/microservices-labs/tree/main/grocery-marketplace-order-service)\\n\\n## Implement the `place order` feature using TDD\\n\\nWhat about starting with writing a test scenario for our uese case using TDD (Test Driven Development), this approach help me immediately implement business logic,\\nin this case ensure no order will be created with quantity less than 20 unit.\\n\\n    ```Kotlin\\n        @Test\\n        fun `should not place order with quantity lower than 20`() {\\n\\n            val productId: ProductId = ProductId(UUID.randomUUID())\\n            val providerId: ProviderId = ProviderId(UUID.randomUUID())\\n            val quantity: Int = 16\\n\\n            val orderCreated = placeOrder.invoke(productId, providerId, quantity)\\n\\n            Assertions.assertEquals(orderCreated.state, OrderState.PLACED)\\n        }\\n    ```\\n\\nI started by creating \\"PlaceOrderFeatureTest\\" test class, then writing my first test as we see in the snippet above. If we look at the project structure in figure below:\\n![Figure 3](order-service-project-structure-1.png)\\n\\n:::note\\nWithin the *domain* package, I created two sub-packages: *features* and *models*. The *models* sub-package includes representations of key domain entities, such as *Order*, *OrderId*, *ProductId*, and *OrderState*.\\nMeanwhile, the *features* sub-package contains feature-specific classes, with *PlaceOrderFeature* being the current implementation. It\'s important to note that in the *models* package, we organize classes according to their respective business domains.\\n:::\\n\\nThe approach involves declaring instances of `productId`, `providerId`, and `placeOrder` prior to the existence of their respective classes. Subsequently, these classes are developed and organized into packages in accordance with the principles of hexagonal architecture,\\nwhich positions business logic at the core, as represented by the domain package.\\n\\nWe continue writing tests, they should be fixed and failed as we implement the business requirements in our place order feature.\\n\\n## Infrastructure implementation\\n\\nNow that we created our first feature, we would like to expose it through a REST API endpoint, but also persist the created Order\\nin a storage, for the purpose of this tutorial, we will implement a **in-memory** persistence.\\n\\nThe hexagonal architecture defines ports and adapters as interfaces and implementations consequentially used to make the domain interacting and connecting with other components of the application such as (persistency, api, messaging, ...)\\n\\n:::note\\n\\nA **port** defines a set of operations that facilitate interaction between business logic and external systems.\\nIn our Kotlin example, these ports are represented by Java/Kotlin interfaces.\\nAn **adapter** manages requests from external sources or from the business logic itself by invoking external applications or services, such as databases or message brokers.\\nBoth ports and adapters can be categorized as inbound or outbound to distinguish between requests directed toward the business logic and those initiated by it.\\n\\n:::\\n\\n:::info `Ports destination packages`\\n\\nPorts will reside in the same root package as domain because they are integrated part of it. For our example: com.algodema.grocery.markeplace.domain.ports\\nAs mentioned before, we separate them into 2 distinct sub packages:\\n    - com.algodema.grocery.markeplace.domain.ports.inbound\\n    - com.algodema.grocery.markeplace.domain.ports.outbound\\n\\nWhere adapters reside in the infrascture root package that we create to group all infrastcutures adapters such as:\\n    - REST API controllers classes\\n    - InMemory, Postgres or any other Repository implementations that serve to persist data.\\n    - External Systems integration such as SAPClient for example.\\n\\n:::\\n\\nLet\'s create the follwing ports and adapters:\\n\\n    1. OrderRepository as an outbond port.\\n    2. PlaceOrder as inbound port.\\n    3. OrdersApi as inbound adapter that will use PlaceOrder port to expose the feature as REST API endpoint.\\n    4. InMemoryOrderRepostory as an outbound adapter that will implement the OrderRepository port interface.\\n\\nBelow we created the InMemoryOrderRepository class that implements the domain port OrderRepository interface, Note also that we annotate this class\\nwith the Spring framework @Repository in order to make it discoverable by Spring IoC container. Remember that we use Spring at the infrastcuture level without any coupling with the domain.\\n\\n```kotlin\\n    package com.algodema.grocery.marketplace.orderservice.infrastructure.spi\\n\\n    import com.algodema.grocery.marketplace.orderservice.domain.models.order.Order\\n    import com.algodema.grocery.marketplace.orderservice.domain.ports.outbound.OrderRepository\\n    import org.springframework.stereotype.Repository\\n\\n    @Repository\\n    open class InMemoryOrderRepository: OrderRepository {\\n        override fun save(order: Order): Order {\\n            throw NotImplementedError(\\"not yet implemented\\")\\n        }\\n    }\\n```\\n\\nNext, we will introduce the Spring framework at the infrastructure layer to create a REST API. We rely on the Spring framework\'s dependency injection to make our component connections decoupled.\\nUsing Dependency Injection, the place order feature will hold an instance of OrderRepository to save the created order, and at the infrastructure\'s API adapter, the REST Controller will hold instances of our features by dependency injection as well.\\n\\n:::note\\n\\nThis is where Hexagonal Architecture shines. We can replace Spring by any other framework for exposing REST APIs or handling persistence without modifying the code within our domain.\\nThis decoupling keeps the domain safe, adaptable, and maintainable, allowing us to change or add new business rules independently of the infrastructure.\\nFor example, if we decide to switch to the Quarkus framework because it is better suited for cloud-native environments, the domain remains completely unaffected.\\n\\n:::\\n\\nTo enable Spring to identify our features for dependency injection, we will create a new root package designated as ddd. This package will encompass the necessary annotations:\\n\\n    1. Feature Annotation: marks our features classes\\n\\n```kotlin\\n    package com.algodema.grocery.marketplace.orderservice.ddd\\n\\n    @Retention(AnnotationRetention.RUNTIME)\\n    annotation class Feature()\\n```\\n\\n\\nAfter creation, we utilize the Feature annotation to designate our **place order** functionality accordingly.\\n\\n```Kotlin\\n    @Feature\\n    class PlaceOrder(private val repository: OrderRepository) : PlaceOrder {\\n        // ...\\n    }\\n```\\n\\n:::tip\\n\\nAs previously noted, we will be utilizing Spring Boot for this project. Therefore, it is essential to incorporate the Spring Boot and Spring Web dependencies into our project, as well as to include the Spring Boot Maven plugin within the Maven build plugins.\\n\\n:::\\n\\nLet\'s create the OrdersApi in the infrastructure package under the sub package api, as follow:\\n\\n```Kotlin\\n    package com.algodema.grocery.marketplace.orderservice.infrastructure.api\\n\\n    import com.algodema.grocery.marketplace.orderservice.domain.features.PlaceOrder\\n    import com.algodema.grocery.marketplace.orderservice.domain.models.order.Order\\n    import com.algodema.grocery.marketplace.orderservice.domain.models.product.ProductId\\n    import com.algodema.grocery.marketplace.orderservice.domain.models.provider.ProviderId\\n    import org.springframework.web.bind.annotation.PostMapping\\n    import org.springframework.web.bind.annotation.RequestBody\\n    import org.springframework.web.bind.annotation.RequestMapping\\n    import org.springframework.web.bind.annotation.RestController\\n\\n    @RestController\\n    @RequestMapping(\\"/orders\\")\\n    class OrderServiceApi(private val placeOrder: PlaceOrder) {\\n\\n        @PostMapping\\n        fun placeOrder(@RequestBody placeOrderRequest: PlaceOrderRequest): Order {\\n\\n            val productId: ProductId = ProductId.from(placeOrderRequest.productId)\\n            val providerId: ProviderId = ProviderId.from(placeOrderRequest.providerId)\\n            val quantity: Int = placeOrderRequest.quantity\\n\\n            return placeOrder.invoke(productId, providerId, quantity)\\n        }\\n\\n    }\\n```\\n\\nWe now need to configure Spring to recognize our annotated features, enabling them to be loaded into its bean container.\\nTo achieve this, we will create a configuration class within a subpackage named config under the infrastructure package. Below is our configuration class:\\n\\n```Kotlin\\n    package com.algodema.grocery.marketplace.orderservice.infrastructure.config\\n\\n    import com.algodema.grocery.marketplace.orderservice.ddd.Feature\\n    import org.springframework.context.annotation.ComponentScan\\n    import org.springframework.context.annotation.Configuration\\n    import org.springframework.context.annotation.FilterType\\n\\n    @Configuration\\n    @ComponentScan(\\n        basePackages = [\\"com.algodema.grocery.marketplace.orderservice\\"],\\n        includeFilters = [ComponentScan.Filter(\\n            type = FilterType.ANNOTATION,\\n            value = [Feature::class]\\n        )]\\n    )\\n    open class DomainInjectionConfig\\n```\\n\\nThe final step is to transform our application\'s entry point class into a Spring Boot application as follows:\\n\\n```Kotlin\\n    package com.algodema.grocery.marketplace.orderservice\\n\\n    import org.springframework.boot.autoconfigure.SpringBootApplication\\n    import org.springframework.boot.runApplication\\n\\n\\n    @SpringBootApplication\\n    open class App\\n\\n    fun main(args: Array<String>) {\\n        runApplication<App>(*args)\\n    }\\n```\\n\\nYou may have noticed the presence of the keyword \\"open\\" preceding the classes App, DomainInjectionConfig, and InMemoryOrderRepository. Here is the rationale behind this choice:\\n\\n:::note\\nIn Kotlin, classes are final by default, meaning they cannot be subclassed unless explicitly marked as open.\\nThis is different from languages like Java, where classes are open for inheritance by default unless marked as final.\\n\\nIn Spring Boot (and Spring Framework in general), many of its features rely on proxy-based mechanisms. These mechanisms involve subclassing beans to apply aspects like transaction management, security, lazy initialization, and other cross-cutting concerns.\\nFor these proxy-based features to work, Spring needs to be able to create subclasses of certain beans, which means the classes need to be open.\\n:::\\n\\nFor the purpose of this exercice we decided to use the **open** modifier to make our classes annotated with Spring not final as we have few classes,\\nbut for large application we can use the [All-open compiler plugin](https://kotlinlang.org/docs/all-open-plugin.html) instead of preceeding each classe required to be open with the **open** keyword.\\n\\nFinally, let\'s run the application either using your IDE such as Intellij Idea or from command line using maven as follow:\\n\\n```shell\\nmvn spring-boot:run\\n```\\n\\nBelow a screenshot of the place order request response overview:\\n\\n![Screenshot](./orders-api-place-order-overview.png)\\n\\n### Conclusion\\n\\nThis post has walked you through the entire process of building a fully functional Microservice, from design to implementation, using DDD and Hexagonal Architecture.\\nMy goal was to share knowledge and experiences regarding the methodology, architecture, and patterns needed to create a maintainable, extensible, and deployable Microservice. However, delivering a production-ready product requires addressing more advanced aspects. Below is a non-exhaustive list of such considerations:\\n\\n    * Api Errors Handling\\n    * Application security\\n    * Database persistency\\n    * Api documentation\\n    * Env variable config\\n\\nKeep in mind that no single pattern, architectural style, or programming language suits all software product requirements. It\'s important to focus on understanding and defining the requirements, parameters, and challenges to make the most informed and effective decisions\\n\\n---\\n\\n## References:\\n\\n- [Domain Driven Design](https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/)\\n- [Microservies Patterns](https://www.manning.com/books/microservices-patterns)\\n- [Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin](https://www.oreilly.com/library/view/clean-code-a/9780136083238/)\\n- [Dependency Injection](https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html)\\n- [The IoC Container](https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html)\\n- [Software Architecture: The Logical View](https://algodema.com/blog/software-architecture-logical-view)\\n- [Software Architecture: The Implementation View](https://algodema.com/blog/software-architecture-implementation-view)\\n\\n---"},{"id":"clean-write-the-code-you-want-to-read-part2","metadata":{"permalink":"/blog/clean-write-the-code-you-want-to-read-part2","source":"@site/blog/2022-09-19-clean-write-the-code-you-want-to-read-part-2.mdx","title":"Clean code: Write The Code You Want To Read (Part 2)","description":"author","date":"2022-09-19T10:06:46.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"},{"inline":true,"label":"craftmanship","permalink":"/blog/tags/craftmanship"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"}],"readingTime":4.81,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"clean-write-the-code-you-want-to-read-part2","title":"Clean code: Write The Code You Want To Read (Part 2)","date":"2022-09-19 10:06:46 +0100","authors":["reda"],"tags":["software","clean code","craftmanship","developer"]},"unlisted":false,"prevItem":{"title":"Designing and Implementing Microservices with DDD and Hexagonal Architecture","permalink":"/blog/designing-and-implementing-microservices-with-ddd-and-hexagonal-architecture.mdx"},"nextItem":{"title":"Clean code: Write The Code You Want To Read (Part 1)","permalink":"/blog/clean-write-the-code-you-want-to-read-part1"}},"content":"![author](/img/blog/clean-code-write-the-code-you-want-to-read-part-2.jpg)\\n[photo source](https://stock.adobe.com/fr/search?k=dactylo&asset_id=809833487)\\n\\n## Functions\\n\\nFunctions constitute a centric component in the recent software programs, the reason why we should care a lot about all\\nof\\ntheir aspects from naming, length, composition, arguments and error handling.\\n\\n### Small\\n\\nYes \\"small\\" is the main rule a function should comply with, so it tell us what it does exactly because a function should\\ndo one thing, do it well and only.\\n\\nTo keep the function also short, [if, else, while, etc ...] statements should be only one line, and probably this line\\nis function call:\\n\\n````kotlin\\nfun bookTrain(bookingRequest: BookingRequest): Booking {\\n    validBookingRequest(bookingRequest)\\n    val booking = Booking.from(bookingRequest)\\n    booking.status(BookingStatus.PENDING)\\n    return booking\\n}\\n````\\n\\n### Single abstraction level\\n\\nOr the principle of \\"Doing one thing\\", the idea is not about writing function with single line of code, or one step but\\nwriting it with the restriction to cover only one computation, see example below:\\n\\n`````kotlin\\n   fun validBookingRequest(bookingRequest: BookingRequest) {\\n    if (bookingRequest.from == bookingRequest.to) {\\n        throw InvalidBookingRequestException(\\"departure and arrival stations are the same\\")\\n    } else if (bookignRequest.stops > 5) {\\n        throw InvalidBookingRequestException(\\"more than 5 stops is not allowed\\")\\n    }\\n\\n}\\n`````\\n\\n### The Step-down rule\\n\\nWe write code to be read, so writing functions in an order like a narrative text, if we have to put the functions of the\\nabove\\ntwo examples, they should appear in the following order:\\n\\n````kotlin\\n   fun bookTrain(bookingRequest: BookingRequest): Booking {\\n    validBookingRequest(bookingRequest)\\n    ...\\n\\n    fun validBookingRequest(bookingRequest: BookingRequest) {\\n        ...\\n\\n````\\n\\nwe can see clearly that **the caller function is above the called one**\\n\\n### Switch statements\\n\\nWhile switch statement can easily impact badly you clean code, The key issue with switch statements is that they often\\nlead to violations of the Single Responsibility Principle (SRP) and can make code harder to extend and maintain.\\n\\n````kotlin\\n   fun calculateWashCost(vehicle: Vehicle): Money {\\n    when (vehicle.type) {\\n        CAR -> calculateCarWashCost(vehicle)\\n        BUS -> calculateBusWashCost(vehicle)\\n        MOTOCYCLE -> calculateMotoCycleWashCost(vehicle)\\n        else -> {\\n            throw InvalidVehiculeType(vehicle.type)\\n        }\\n    }\\n}\\n````\\n\\nThere many issues with this function above, first the function is large and each time new vehicle type will be added, it\\nwill grow even more.\\nSecond it violates the Single Responsibility Principle (SRP) because there is more one reason for it to change, but the\\nworst probem is there will be more functions\\nthat will have the same structure:\\n\\n    * CalculateParkingCost(vehicle: Vehicle): Money\\n    * CalculateCarbonTax(vehicle: Vehicle): Money\\n\\nA solution proposed by Robert C.Martin is his book \\"Clean Code\\" is to hide the switch statement in an abstract factory,\\nand the factory will use the switch statement\\nto create the appropriate instances of the derivatives of Vehicle. And the various functions such as\\nCalculateParkingCost, CalculateCarbonTax will be dispatched polymorphic through the Vehicle interface.\\n\\n````kotlin\\n\\nabstract class Vehicle {\\n    abstract fun calculateWashCost(): Money\\n    abstract fun calculateParkingCost(): Money\\n    abstract fun calculateCarbonTax(): Money\\n}\\n\\nabstract interface VehicleFactory {\\n    abstract fun createVehicle(vehicle: Vehicle): Vehicle\\n}\\n\\nclass VehicleFactoryImpl() {\\n    fun createVehicle(vehicle: Vehicle): Vehicle {\\n        return when (vehicle.type) {\\n            CAR -> Car(vehicle)\\n            BUS -> Bus(vehicle)\\n            MOTOCYCLE -> MotoCycle(vehicle)\\n            else -> {\\n                throw InvalidVehiculeType(vehicle.type)\\n            }\\n        }\\n    }\\n}\\n````\\n\\n### Functions common patterns\\n\\nDon\'t hesitate to make your function\'s name long if necessary in order to ensure a significant name.\\nWhen it comes to function argument the ideal number is 3, then comes one (monadic), followed closely by two (dyadic).\\nThree arguments (triadic) should be avoided where possible. The challenge with arguments resides in testing you can\\nimagine the difficulty of writing all\\nthe test cases to ensure that all the various combinations of arguments work correctly.\\nHave you ever heard about \\"Flag Argument\\"? Flag argument is an argument of type boolean where the function do a thing\\nwhen it\'s true and another thing if it\'s false,\\nthese arguments violates the Single Responsibility Principle (SRP).\\n\\n#### Argument Objects\\n\\nIf a function needs more than two or three arguments, there is probably a way to wrap some of them into an object, see\\nthe following example:\\n\\n`````kotlin\\n  fun deployApplication(applicationId: Int, cpu: Int, memory: Int, storage: Int, tag: String) {\\n    //  do something ...\\n}\\n`````\\n\\nWe can reduce the number of argument by passing an object representing the infrastructure requirements, see example\\nbelow\\n\\n`````kotlin\\n  fun deployApplication(applicationId: Int, infrastructureRequirements: InfrastructureRequirements, tag: String) {\\n    // do something ...\\n}\\n`````\\n\\n#### Command Query Separation\\n\\nThe Command-Query Separation (CQS) principle states that a function should either perform an action (a command) or\\nreturn\\ndata (a query), but not both. This makes the code more predictable, easier to test, and cleaner.\\n\\n````kotlin\\n  // Query function: returns whether the withdrawal can happen (no state modification)\\nfun canWithdraw(balance: Int, amount: Int): Boolean {\\n    return amount <= balance\\n}\\n\\n// Command function: performs withdrawal by returning the new balance (state modification, no return of query data)\\nfun withdraw(balance: Int, amount: Int): Int {\\n    return if (canWithdraw(balance, amount)) {\\n        balance - amount  // Returns the updated balance\\n    } else {\\n        balance  // No changes if insufficient funds\\n    }\\n}\\n\\nfun main() {\\n    var balance = 100\\n\\n    // Query if withdrawal is possible\\n    if (canWithdraw(balance, 50)) {\\n        // Command: Update the balance by performing withdrawal\\n        balance = withdraw(balance, 50)\\n        println(\\"Withdrawal successful. New balance: $balance\\")\\n    } else {\\n        println(\\"Insufficient funds\\")\\n    }\\n}\\n\\n````\\n\\n## Conclusion\\n\\nLet\'s admit that functions are fundamental components of our code, so it\'s crucial to invest time and effort into defining them properly, including their names, arguments, and statements.\\nWriting software is similar to any other form of writing\u2014you begin by drafting your ideas, then refine them until they flow smoothly. Remember, we write code not just for execution, but also to be easily understood by others.\\n\\n\\n----\\n\\n* [The Clean Code Blog](https://blog.cleancoder.com/)\\n* [Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin](https://www.oreilly.com/library/view/clean-code-a/9780136083238/)\\n* [Functional Design: Principles, Patterns, and Practices by Robert C. Martin](https://www.oreilly.com/library/view/functional-design-principles/9780138176518/)\\n* [10 steps to clean code](https://www.pluralsight.com/blog/software-development/10-steps-to-clean-code)\\n* [Kotlin coding conventions](https://kotlinlang.org/docs/coding-conventions.html)"},{"id":"clean-write-the-code-you-want-to-read-part1","metadata":{"permalink":"/blog/clean-write-the-code-you-want-to-read-part1","source":"@site/blog/2022-08-30-clean-write-the-code-you-want-to-read-part-1.mdx","title":"Clean code: Write The Code You Want To Read (Part 1)","description":"author","date":"2022-08-30T21:06:46.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"},{"inline":true,"label":"craftmanship","permalink":"/blog/tags/craftmanship"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"}],"readingTime":5.815,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"clean-write-the-code-you-want-to-read-part1","title":"Clean code: Write The Code You Want To Read (Part 1)","date":"2022-08-30 21:06:46 +0100","authors":["reda"],"tags":["software","clean code","craftmanship","developer"]},"unlisted":false,"prevItem":{"title":"Clean code: Write The Code You Want To Read (Part 2)","permalink":"/blog/clean-write-the-code-you-want-to-read-part2"},"nextItem":{"title":"Introduction to software functional and behaviour testing","permalink":"/blog/introduction-to-software-functional-and-behaviour-testing"}},"content":"![author](/img/blog/clean-code-write-the-code-you-want-to-read.jpg)\\n[photo source](https://unsplash.com/photos/FTNGfpYCpGM)\\n\\n## Clean Code!\\n### Why should I care?\\nWe, software engineers almost spent more time reading code than writing new lines, how many times do we complain about someone else\'s code? Many factors can give us an idea about\\nthe quality of code and how much the writer cares about it. If you dislike reading bad code, you already made your first step toward writing good code if you care about\\nyour heritage.\\nThere are many good reasons to care about writing clean code, adding the artistic layer to your code is an inspiring reason for me to learn and apply the clean code rules and principles.\\n\\n### What clean code brings to me?\\nClean code is what makes us professional programmers, someone with high-level ethics who cares about the present and the future of his code, he believes that lines of code\\ncan live for long and can be enhanced by others with ease and passion. Like a book author what makes him happy is how readers enjoy turning the pages of his book one after the other without realizing the time elapsed.\\n\\n### Clean code is about philosophy!\\nClean code makes us more than a programmer, it helps us develop a good vision of the software we are building, caring about its growth, evolutionary, and enhancement. Clean code makes us a thinker about\\nmaintainability, design, and the ability of the software to cope with changes quickly and easily.\\nCode is written to live but also to change and evolve.\\n\\n### We are authors\\nYes, we programmers are authors, that said, we have readers, Indeed we are responsible for communicating well with readers. The next time we write a line of code, we\'ll remember\\nwe are authors, writing for readers who will judge our effort.\\n\\n## What clean code covers?\\n\\n### Naming\\nAs a programmer the first step of writing code is choosing names, for variables, functions, classes, packages and source code files.\\nWhile this seems easy and instinctive, choosing good names takes time but saves more than it takes.\\n\\nLet\'s look at the following code snipped:\\n```shell\\n d = Date.now();\\n```\\nThe name \\"d\\" above has nothing to reveal, even tough it is a date object, but we cannot know the intention of usage, either its start date or end date.\\nNote that even naming it startDate doesn\'t give it any sense, because we need to know as a reader what is the context of the start date.\\nHers is a suggestion for this example:\\n```shell\\ntaskStartDate = Date.now();\\n```\\n#### Abbreviation\\nAbbreviation Is one of the most common mistakes concerning variable naming, as a programmer can you guess what this variable name below means?\\n```shell\\nmsg\\n```\\nCan you know that msg may mean \\"message\\" or \\"most scored goal\\"? Personally, I don\'t want to spend time exploring many lines before\\nor after this one to understand the context of this variable in case I need to make a change. The rule is to avoid any disinformation.\\n\\n#### Distinction\\nAnother issue with naming is the number-series such as (variable1, variable2), consider the following function:\\n````java\\npublic static void duplicateString(char a1[], char a2[]){\\n        ...\\n        }\\n````\\nis it not more readable if we use \\"source\\" and \\"destination\\" as the names of the two arguments? I think yes, it is.\\n\\nAdding noise words is another problem that impacts the cleanness of the code, you may want  to specify that a variable is \\na String, so you name it: __\\"emailContentString\\"__, Here the \\"String\\" is just redundant as is not part of the name but the type\\nwhich has nothing to do with the meaning of the variable.\\n\\n#### Word Sounding\\nAs a programmer, there is a good chance that while we are writing code, our brain is pronouncing the text we type. when we cut the connection\\nbetween our brain and the activity of writing, we usually type variable names that could be difficult to pronounce, and the consequences\\nare multiple: other developers won\'t be able to retain them easily and these names will be demanding to discuss with the business analysts.\\nWhile English is the most used natural language used to write code, using other languages such as  French or Italian, apply the same rules regarding\\nhow easily the variables, functions, or classes names are pronounceable.\\n\\n#### Are names accessible?\\nEach time I take over developing a new feature or fixing a bug that requires modifying a source code that not has been writing by me,\\nI start by searching some keywords that I got from the context of the domain system. For Example when I was asked to fix\\na UI bug in a web application developed using ReactJS then I was trying to find the matching component in the source code, but it was not as\\neasy as expected and I spent 30 minutes before finding the component named with a number prefix: 1CounterComponent. This is why\\nchoosing names that are straightforward to find is a very useful rule to follow.\\n\\n\\n#### Coding Conventions\\nEvery programming language provides coding conventions regarding variables, functions, classes, and naming source code files. While\\nthe naming took a good part of these conventions, they also cover indentation, comments, declaration order, etc ...\\nI don\'t hesitate to refer to these conventions. But during my modest experience, I came across some coding conventions\\nfrom specific programming languages applied to another one. This is strongly discouraged or prohibited by the teams themselves.\\n\\n#### Technical Vs Business Names\\nWe write code to build software that will be solving a problem, For example: coding an application that computes taxes.\\nTrying to be a good programmer implies differentiating technical things from business-related ones. whenever you code\\na technical concept don\'t try to use mainly a domain name, For example: declaring a variable that holds an instance of the\\nHTTP client could have the following name: __httpClient__, but if we try to include the business-related usage we can name it:\\n__taxesRulesHttpClient__ as you can see in this case the domain doesn\'t bring any help instead is just making a technical\\nthing harder.\\n\\n#### A last note\\nWriting clean code requires a piece of cultural knowledge and good descriptive, communication, and writing skills, we can develop\\nthese skills by learning from communication experts either by reading books or taking courses on how to write, synthesis, and\\norder ideas. Also evolving on the natural language we use to code. For example, if we write code in English, it will be helpful\\nto learn more words, synonyms, sentences, etc...\\n\\nSo far I wanted to pay your attention to the importance of clean code, and how can impact the software\'s quality and maintenance,\\nWe covered mainly the naming concept in this part. Other articles will follow to cover other aspects concerned by clean code.\\n\\n----\\n\\n* [The Clean Code Blog](https://blog.cleancoder.com/)\\n* [Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin](https://www.oreilly.com/library/view/clean-code-a/9780136083238/)\\n* [10 steps to clean code](https://www.pluralsight.com/blog/software-development/10-steps-to-clean-code)\\n* [Kotlin coding conventions](https://kotlinlang.org/docs/coding-conventions.html)"},{"id":"introduction-to-software-functional-and-behaviour-testing","metadata":{"permalink":"/blog/introduction-to-software-functional-and-behaviour-testing","source":"@site/blog/2022-02-26-introduction-to-software-functional-and-behaviour-testing.mdx","title":"Introduction to software functional and behaviour testing","description":"author","date":"2022-02-26T22:45:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"clean code","permalink":"/blog/tags/clean-code"},{"inline":true,"label":"craftmanship","permalink":"/blog/tags/craftmanship"},{"inline":true,"label":"tests","permalink":"/blog/tags/tests"},{"inline":true,"label":"cucumber","permalink":"/blog/tags/cucumber"}],"readingTime":6.335,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"introduction-to-software-functional-and-behaviour-testing","title":"Introduction to software functional and behaviour testing","date":"2022-02-26 22:45:31 +0100","authors":["reda"],"tags":["software","clean code","craftmanship","tests","cucumber"]},"unlisted":false,"prevItem":{"title":"Clean code: Write The Code You Want To Read (Part 1)","permalink":"/blog/clean-write-the-code-you-want-to-read-part1"},"nextItem":{"title":"Software Architecture: The Implementation View","permalink":"/blog/software-architecture-implementation-view"}},"content":"![author](/img/blog/introduction-to-software-functional-and-behavior-testing.jpg)\\n[photo source](https://images.unsplash.com/photo-1600492515568-8868f609511e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1250&q=80)\\n\\n## Functional Testing\\n### What is a functional test ?\\nFunctional tests are one of these software testing approaches or test types such as (unit tests, integration tests, load tests, penetration tests, ...) all with one mission to test that the software is compliant whether with business specification, technical requirements or other quality and usability metrics. But functional tests focus on ensuring that the software functions behave as expected by the business specifications, these tests don\'t interact with source code such as unit tests, but mainly with the software features.\\nA functional test usually puts the system, the application or the software we want to test in an initial state where we provide the necessary elements to make the test executable such as storing a list of cars in the database, then we test the feature find a car for the period of (2nd march to 7th march), then we validate that the output matches the expected result.\\n### Why do we need to write functional tests?\\nWe need to write functional test to validate the features from a user perspective, hence we validate the following:\\n\\n -  Feature is working as expected by the specifications\\n -  Usability: checks whether the feature is easily usable, for example, a button is freely reachable on the page.\\n -  Errors: when a subsystem is not responding, do we display an error message to the user to help him understand what\'s going on.\\n\\n### Functional testing style\\nA common form that functional testing take is the Given-When-Then, this approach coming from the [BDD (Behaviour Driven Development)](#bdd-behavior-driven-development) defines the structure of many testing frameworks such as Cucumber that we will cover in our example later in this article.\\nThe prime idea is to break down a scenario (test)  into three sections:\\n\\n - **Given**:  the given part defines the pre-conditions before challenging the system by executing or running a feature.\\n - **When**: is do we want to do with the system, for example ( *when I book a car*)\\n - **Then**: describes the expected result or output after the application or the software  behaves in to respond to your action.\\n\\nTo simplify the idea, let\'s write an example for a rental car website using the Cucumber Tool (Framework):\\n\\n    Feature: User book a car\\n\\t    Scenario: User requests to book a car from 1st March to 7th March 2022\\n\\t\\t     Given I select a car from the available cars for the period (1st March to 7th March 2022)\\n\\t\\t\\t    And I select GPS as an additional Option\\n\\t\\t\\t    And I select Full Insurance\\n\\t\\t\\t When I book the car\\n\\t\\t\\t Then I should receive a confirmation\\n\\n\\n### BDD: Behavior Driven Development\\nBDD combines the best practices of  **Test Driven Development** TDD, **Domain-driven Development** (**DDD**), and **Object Oriented Programming** (**OOPs**)\\nFor an agile team, scoping a feature is a very important task, as the stakeholders are talking about the business requirements, the development team is more interested in the technical challenges, Here comes the **BDD** to provide a common language that allows efficient communication and feedback and then a perfect specification, development vision, and feature delivery.\\n\\nBDD closes the gap between the business and the technical people by:\\n\\n - Encouraging collaboration across roles to build a shared understanding of the problem to be solved.\\n - Working in a rapid and small iteration to promote the feedback and optimize the value delivery.\\n - Producing documentation that is automatically checked against the software behavior.\\n\\nThere is a good chance that you\'re agile at your organization so you already plan your work in small increments of value like User Stories. In this case, BDD will help you to deliver your promises of agile on time. BDD does not replaces your processes but enhances them.\\n\\n### BDD and Functional Testing\\nLet\'s focus on the word **Behaviour** so functional testing of behavior testing is these tests your write to check your system or the software you\'re building how behaves. Functional testing can also be called ***behavior testing***.\\n\\n### Behaviour Testing in action\\nTo illustrate all these abstract notions explained briefly in this article, let\'s write a small application and its behavior tests using **Kotlin** programming language and **Cucumber**\\n\\n - **Kotlin** is a JVM programming language, like Java, Scala, or Groovy\\n - **Cucumber** is a testing tool that supports Behavior Driven Development\\n - **Gherkin**  is a business readable language that helps you to describe business behavior without going into details of implementation\\n\\nWe will need the following to build this example:\\n\\n 1.   [Java SE](https://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html)  (Java 9 and higher are not yet supported by Cucumber)\\n 2.   [Maven](https://maven.apache.org/index.html)  - version 3.3.1 or higher\\n 3.   [IntelliJ IDEA](https://www.jetbrains.com/idea/)  (which will be used in this tutorial)\\n    -   [IntelliJ IDEA Cucumber for Java plugin](https://plugins.jetbrains.com/plugin/7212-cucumber-for-java)\\n    -   [IntelliJ IDEA Kotlin plugin](https://plugins.jetbrains.com/plugin/6954-kotlin)\\n\\n\\n1. Clone the project from github\\n\\n```shell\\ngit clone https://github.com/reda-jaifar/hands-on-kotlin.git\\ncd sportair\\n```\\n 2. Open the project in IntelliJ IDEA:\\n\\n\\t-   **File -> Open\u2026 -> (Select the pom.xml)**\\n\\t-   Select  **Open as Project**\\n\\n3. Verify Cucumber installation\\n\\n```shell\\nmvn test\\n```\\nNow our environment is ready, let\'s write some scenarios for the following application:\\n\\n    SportAir is an application that indicates whether we\\n    can exercise outside or not based on the weather.\\n\\nIn Cucumber, an example is called a [scenario](https://cucumber.io/docs/gherkin/reference#example). Scenarios are defined in `.feature` files, which are stored in the directory (or a subdirectory).\\n\\nCreate an empty file called `src/test/resources/sportair/can_we_exercice_outtside.feature`  with the following content:\\n\\n    Feature: Can we exercise outside?\\n          Everybody wants to know if we can exercise in the air\\n\\n          Scenario: The weather is not convenient for exercising outside\\n            Given The temperature is 42 celsius\\n            When I ask whether I can exercise outside\\n            Then I should be told \\"Nope\\"\\n\\nif you\'re using Intellij Idea Cucumber Plugin, you should see the keyword colored, below the meaning of each:\\n\\n - **Feature**: is a keyword that should be followed by the feature name, a good practice is to use the name of the file. The line that follows is a description that will be ignored by Cucumber execution parser.\\n   <br />**NB**:  We use a feature by file\\n - **Scenario**: defines the name of a scenario, we can have as many scenarios as expected by a feature.\\n - **Given, When, Then**: are the steps of the scenario. Refers to the definition [above](#functional-testing-style).\\n```shell\\nmvn test\\n ```\\n\\n```shell\\nThe output should be something like the following:\\n Given The temperature is 42                                  # StepDefs.The temperature is(int)\\n    When I ask whether I can exercise outside                    # StepDefs.I ask whether I can exercise outside()\\n    Then I should be told nope                                   # StepDefs.I should be told(String)\\n\\n  Scenario: The weather is convenient for exercising outside # sportair/can_we_exercice_outside.feature:9\\n    Given The temperature is 24                              # StepDefs.The temperature is(int)\\n    When I ask whether I can exercise outside                # StepDefs.I ask whether I can exercise outside()\\n    Then I should be told of course                          # StepDefs.I should be told(String)\\n\\n2 Scenarios (2 passed)\\n6 Steps (6 passed)\\n0m0.181s\\n\\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.403 sec\\n\\nResults :\\n\\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0\\n```\\n\\n###  Behavior Driven Testing Benefits\\n\\n -  Helps document specification by the usage of non-technical language\\n -  Focuses on how the system should behave from both user and developer perspective\\n -  Gives high visibility of the system design\\n -  Helps to make the software or the system meet the user need\\n\\nThe figure below illustrates the process of BDD and how it can help to write down behavior tests.\\n\\n![BDD Process](/img/blog/bdd-process.jpeg)\\n\\n*This figure defines a step flow to help define and write down behavior tests*\\n\\n----\\n\\n* [Cucumber Documentation](https://cucumber.io/docs/cucumber/)\\n* [Testing & Domain Specific Language By Martin Fowler](https://martinfowler.com/bliki/GivenWhenThen.html)\\n* [Domain-driven design Book by Eric Evans](https://www.oreilly.com/library/view/domain-driven-design-tackling/0321125215/)"},{"id":"software-architecture-implementation-view","metadata":{"permalink":"/blog/software-architecture-implementation-view","source":"@site/blog/2021-11-20-software-architecture-implementation-view.mdx","title":"Software Architecture: The Implementation View","description":"author","date":"2021-11-20T18:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"system design","permalink":"/blog/tags/system-design"},{"inline":true,"label":"microservices","permalink":"/blog/tags/microservices"},{"inline":true,"label":"monolithic","permalink":"/blog/tags/monolithic"}],"readingTime":6.725,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-implementation-view","title":"Software Architecture: The Implementation View","date":"2021-11-20 18:49:31 +0100","authors":["reda"],"tags":["software","architecture","system design","microservices","monolithic"]},"unlisted":false,"prevItem":{"title":"Introduction to software functional and behaviour testing","permalink":"/blog/introduction-to-software-functional-and-behaviour-testing"},"nextItem":{"title":"Software Architecture: The Logical View","permalink":"/blog/software-architecture-logical-view"}},"content":"![author](/img/blog/implementation-view.jpeg)\\n[photo source](https://middleware.io/wp-content/uploads/2021/09/What-are-microservices_-How-does-microservices-architecture-work_.jpg)\\n\\n![The 1+4 Model View](/img/blog/1plus4model-implementation-view.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\n\\n# The implementation view\\nIncludes the result of the build process that can be run or deployed such as a Java JAR or Node.js Package. These artifacts interact\\nwith each other in the form of a composition or dependency relationship.\\n\\n##  The Monolithic Architecture Style\\nLet\'s extract the definition of monolithic architecture from an example. Imagine you are invited to develop an enterprise application for\\nmanaging music concerts ticketing, One of the requirements is to access the system from the browser and a mobile native application. SO the application\\nwill handle HTTP requests, execute a function and access a database to persist the data. One of the design options we may have\\nis to create different components each one is responsible for a specific business logic (event subscription, payments, ticket editing ...). if we choose to develop with\\nthe java programming language and the spring framework, we\'ll have one application with many modules interconnected and coupled to accomplish\\nthe job. But what about the deployment? what type of build output will generate and how to deploy it into a production environment.\\nThe answer is we will generate a single Java WAR file.\\n![author](/img/blog/monolithic-architecture.png)\\n\\n*The monolithic representation of our example application (Music Event Application) where we can distinguish bounded functions of the system but all in one artifact*\\n\\nThis is what monolithic architecture is about to define the output of your source code as one piece that you can easily:\\n* Deploy (push or put into the production environment, or any other environment such as development or staging)\\n* Scale (run multiple instances of the application in response to increasing traffic)\\n* Debug (in case of non-normal behavior of the system you can explore the logs, check the config, and so on to find the error, all these things are on the same process)\\n\\n- Question: Now the system is up and running, but a new feature is required which needs to update the payment provider within our application, how can we achieve that?\\n- Answer: we have to update the source code, re-build the whole application, think of a deployment strategy to ensure service continuity of our application.\\n\\nIn the context of our monolithic application, many drawbacks are rising while changing a small piece of the system:\\n\\n- Even though the change concern only one part of the system, this one becomes indivisible and decoupled, the build and deploy process is slower because all the source code should be re-build to generate the new artifact (Java WAR file)\\n- The whole system is developed with one stack which limits the on-boarding of other developers with different backgrounds\\n- Less re-usability of the components.\\n- Increasing the artifact (build output) volume.\\n- Reliability as one bug in the ticket editing component can cause the whole system to shut down.\\n\\nIn the next section, we discuss the alternative and how microservices address many of the drawbacks of monolithic and bring new added value but also some very challenging points to handle.\\n\\n## The Microservices Architecture Style\\nMicroservices architecture style organizes the application as a set of loosely coupled, independently deployable services, Together these services deliver the functional and business\\nfeatures of the system we want to build. Let\'s continue with our Music Event Application example and try in the above illustration to define its microservices architecture:\\n\\n![author](/img/blog/implementation-view-microservices.png)\\n*The Microservices representation of our example application (Music Event Application) where 3 services communicate through HTTP using REST*\\n\\nAs we can observe in the illustration each service run in an independent process and also could have its database(recommended), Notice also how these services communicate\\nto each other, in this example, I suggest using the REST API through HTTP, but this is not the only communication option we can have, there are more such as messaging using a message broker.\\n\\n__Let\'s tackle with further detail the microservices inter-communications in a dedicated article, so far and the rest of this document we will use REST as a reference.__\\n\\n### What is a service?\\nAs the word service is a most recurrent when we explore the microservice architecture, Here is a definition:\\n> A service is an independent deployable application or software component that provides a set of functionalities accessible\\n> through an API. Service has its own logical architecture, Hexagonal architecture may fit many use-cases, In addition\\n> a service can be developed with its specific technology stack that may differ from other services\' technology stacks in a microservices architecture\\n\\n[read more about Hexagonal Architecture and alternatives in this article](./2021-10-17-software-architecture-logical-view.mdx)\\n\\n### What is loosely coupled Services and why they should?\\nTwo services are loosely coupled if changes in the design, implementation, or behavior in one __won\'t__ cause change in others. In a Microservices architecture, the coupling will happen when\\na change in one enforces an almost immediate change to one or more microservices that collaborate with it directly or indirectly.\\n\\nWhile designing Microservices architecture, to make the services the less coupling possible, consider the following points:\\n#### <span style={{color: \\"orange\\"}}>Database sharing</span>\\nthe data storage is a microservice implementation detail that should be hidden from its clients (usually other microservices). \\nIf Microservice A needs to access data of Microservice B, B should provide an API that A will use to consume the needed data\\n\\n#### <span style={{color: \\"orange\\"}}>Code Sharing</span>\\nBy definition, microservices do not share codebase, but we may want to avoid redundancy by sharing dependency libraries and\\nend up needing to update frequently in response to that libraries\' client\'s change requests. So shared code should be as minimum as possible.\\nA good practice that may seem strange at glance is to duplicate code so each service has its copy, so we need to update\\nthe library to match Service A requirements, Service B remains un-impacted \\n\\n#### <span style={{color: \\"orange\\"}}>Synchronous Communication</span>\\nIn a Microservice architecture, services cooperate to accomplish the job, so they need to communicate either asynchronously or\\nsynchronously where the service caller expects a timely response from the callee service might even block while it waits. To address the potential\\nresponse latency, we can integrate a caching mechanism or implement the [circuit breaker pattern](https://microservices.io/patterns/reliability/circuit-breaker.html) to avoid cascading failures. These two options\\ncould help remediate the system quickly, but for the long term, the best alternative is switching to asynchronous communication\\nby using a messaging broker like [Apache Kafka](https://kafka.apache.org/), So services can cooperate by publishing and consuming messages.\\n\\nWhen it comes to designing the next-generation software, relying on a strong and reliable architecture helps a lot, In\\nrecent decades, much great software conquered the market and is serving millions of users while scaling up and down to reduce\\ncost and energy or respond to an increasing number of requests. __Microservices Architecture__ is part of other practices\\nand engineering designs behind thanks to its benefits, below is a non-exhaustive list:\\n\\n- Independent development: microservices can be developed in isolation to accomplish a defined functionality\\n- Independent deployment: microservices can be deployed individually and independently in any environment (cloud, on-premise, managed infrastructure)\\n- Fault isolation: if one service fails, the system remains up and only the functionality provided by that stopped microservice will be impacted\\n- Technology stack: different programming languages, frameworks, and technologies can be used to build the same software, usually a [SaaS](https://en.wikipedia.org/wiki/Software_as_a_service)\\n- Individually scaling: each service can scale as per need, is not necessarily to scale the whole system as is the case of monolithic based  application\\n\\nDespite the number of advantages Microservices Architecture is bringing, choosing it over Monolithic Architecture relies upon\\non the context, the application domain (banking, delivery, e-commerce, ...) and scope (either is a lightweight application or\\na complex evolving application), your organization software engineering capabilities and culture.\\n\\n----\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)\\n* [Microservice Patterns by Chris Richardson](https://microservices.io)"},{"id":"software-architecture-logical-view","metadata":{"permalink":"/blog/software-architecture-logical-view","source":"@site/blog/2021-10-17-software-architecture-logical-view.mdx","title":"Software Architecture: The Logical View","description":"author","date":"2021-10-17T12:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"4+1","permalink":"/blog/tags/4-1"},{"inline":true,"label":"logical view","permalink":"/blog/tags/logical-view"}],"readingTime":4.315,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-logical-view","title":"Software Architecture: The Logical View","date":"2021-10-17 12:49:31 +0100","authors":["reda"],"tags":["software","architecture","4+1","logical view"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The Implementation View","permalink":"/blog/software-architecture-implementation-view"},"nextItem":{"title":"Software Architecture: The 4+1 view model","permalink":"/blog/software-architecture-the-4-plus-1-model"}},"content":"![author](/img/blog/logical-view.jpeg)\\n[photo source](https://dz2cdn1.dzone.com/storage/article-thumb/8685724-thumb.jpg)\\n\\n![The 1+4 Model View](/img/blog/1plus4model-logical-view.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\n\\n##  The layered architecture style\\nThis is my first architecture style I\'ve discovered 10 years ago thanks to my java enterprise application course teacher, Ths idea\\nconsist of organizing the elements of an application into layers. Those elements could be java classes grouped by the responsibility type\\nthey manage and respect the rule that each layer should depend only on the layer below it, Another version also tolerate that a layer can\\ndepends on the any of the layers below it.\\n\\nEven though we can apply this architecture style to any of the 4 model view we\'ve seen above, It is most likely to be used in the logical view\\nas follows:\\n\\n* __Presentation layer__: groups classes & interfaces that handle the UI interactions, Such as desktop application UI that handles user interactions like Click, Press, etc...\\n* __Business logic layer__: contains classes where we implement the business logic of the system. For example classes that calculate the shortest route for delivering merchandise from stock house to customer.\\n* __Persistence layer__: contains interfaces and classes that interact with database or file system. For example classes that communicate with a MySQL database.\\n\\n![3 Tier Java Application Architecture](/img/blog/n-tier-architecture-style-java.jpg)\\n<i>In the above figure, we illustrate the 3 tier architecture for a java application, classes of the same layer are grouped using packages.Note that architecture is beyond\\nany programming language, so for example in case of a C# application we group classes in namespaces instead of packages for java.</i>\\n\\nThe years go by and the software development community began to recognize some drawbacks of N Tier architecture, below we list some of them:\\n\\n- __Single Presentation Layer__: With the evolution of the web and mobile applications, many systems provide the same functions, For example a desktop application\\n    for logistics providing the feature of calculating the shortest route and cost of a delivery, While the business logic remains the same, \\n    the interactions with the system are evolving with mobile and web users.\\n- __Single Persistence Layer__: Modern systems needs to interact with many and/or different storage systems rather than one database.\\n- __Layer dependencies__: As the business logic depends on the persistence one, we are prevented from testing the business logic in an isolation.\\n\\nThese disadvantages lead to an alternative architecture style we present next.\\n\\n## The Hexagonal Architecture Style\\nThis architecture style organizes the logical view in a way that puts the business logic at the center. In contrast to the layered\\narchitecture that has a presentation layer, we have here one or more inbound adapters that handle requests from the outside by invoking\\nthe business logic. The same applied to the persistence layer, the application has or more outbound adapters that are invoked by the business logic and invoke external applications.\\nThe main characteristic of this architecture style is that the business logic doesn\'t depend on these adapters, instead they depend on it.\\nThe Business logic has one or more ports.A __port__ defines a set of operations and is how the business logic interacts with\\nwhat\'s outside it. For example in java these ports are a Java Interface. we distinguish inbound and outbound ports. An inbound port is an API exposed by\\nthe business logic, which enables it to be invoked by external applications, for example a REST API.An outbound port is how the business\\nlogic invokes external systems like Database Access Repositories.\\n\\nLike the ports there are inbound and outbound adapters. An inbound adapter handles requests from the outside world\\nby invoking an inbound port. For example in the case of a Java Web Application using Spring framework, An inbound\\nadapter is a Rest Controller that will invoke inbound port exposed by the business logic.\\nAn outbound adapter implements an outbound port and handles requests from the business logic by invoking an external\\napplication or service.An example of an outbound adapter is an Event Publisher to Kafka or any other Event streaming system.\\n\\n![Hexagonal Architecture](/img/blog/hexagonal-architecture.jpeg)\\n\\n*The Figure above shows an example of the hexagonal architecture where the business logic has one or more adapters to communicate with external systems*\\n\\nLet me remind you that decoupling the business logic from the presentation and data access is the important benefit\\nof the hexagonal architecture style. This is very useful also when it comes to testing as you can use <abbr title=\\"Test Driven Development\\">__TDD__</abbr>\\neasily as you can test your business logic in an isolation.It also defines new model for the modern applications where the \\nbusiness logic can be invoked by multiple adapters each one of them invokes an external system.\\n\\n> The Hexagonal Architecture style is well fit to define the architecture of each service in a microservice architecture.\\n\\nBoth the layered and hexagonal architectures are a set of constraints and rules on how elements within the logical\\nview are connected and how they communicate.\\n\\n----\\n\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)"},{"id":"software-architecture-the-4-plus-1-model","metadata":{"permalink":"/blog/software-architecture-the-4-plus-1-model","source":"@site/blog/2021-09-18-software-architecture-the-4-plus-1-model.mdx","title":"Software Architecture: The 4+1 view model","description":"author","date":"2021-09-18T12:49:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"architecture","permalink":"/blog/tags/architecture"},{"inline":true,"label":"system design","permalink":"/blog/tags/system-design"}],"readingTime":3.615,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-architecture-the-4-plus-1-model","title":"Software Architecture: The 4+1 view model","date":"2021-09-18 12:49:31 +0100","authors":["reda"],"tags":["software","architecture","system design"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The Logical View","permalink":"/blog/software-architecture-logical-view"},"nextItem":{"title":"DevOps: Strengthen your digital transformation","permalink":"/blog/devops-strengthen-your-digital-transformation"}},"content":"![author](/img/blog/software-architecture-play-with-bricks.jpeg)\\n[photo source](https://holition.com/play/ycn-s-lego-serious-play-workshop)\\n\\n# What is Software Architecture?\\n__The software architecture of a computing system is the set of structures needed to reason about the system, which \\ncomprise software elements, relations among them, and properties of both.__\\n<u>by SEI</u>\\n\\nWe can decrypt the above definition as structuring a system as a whole recessed block into parts connected, complementary and modular.\\nThe more these parts are decoupled and can work independently, and communicate to each other effectively the more our architecture\\nwill fill its mission to ensure a maintainable, extensible and homogeneous system.\\n\\n# The 4+1 view model of software architecture\\nLike a building, there are different plans and maps that can describe different the different perspectives of that building,\\nwe have the electrical, plumbing, structural and others. This is exactly how the 4+1 view model defines software architecture\\nin the paper published by [Phillip Krutchen](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n\\n![The 1+4 Model View](/img/blog/1plus4model.png)\\n*The 4+1 view model describes an application\u2019s architecture using four views, along with scenarios that show how the elements within each view collaborate to handle requests*\\n\\nEach of the four views has a well-defined purpose as detailed below:\\n## Logical View\\nIt consists of the source code written by developers, in the context of an oriented programming language like Java, the elements are\\nclasses and packages, in addition to relationships between them such as inheritance, association, and composition...\\n\\n## Implementation View\\nIncludes the result of the build process that can be run or deployed such as a Java JAR or Node.js Package. These interact with each\\nother in the form or a composition or dependency relationship.\\n\\n\\n## Process View\\nRefer to the process holding and running either in virtual machines or containers like docker, relations between them is called\\ninter-process communication.\\n\\n## Deployment View\\nRepresents the map of the physical or virtual machines where the system is executed and running, also describes the communication\\nat level through the network. For example this view can be a VPC with all the routing configuration inside this network and between it and the internet.\\n\\n# Why an application architecture is relevant?\\nAn application come to life with the purpose of solving a problem, to do so it needs to fulfill two types of requirements, Functional requirements\\nthat defines what the application should do, Previously defined in the form of specifications, with the __agile__ edge we define them as __user stories__,\\n__use cases__, or events. we can start coding immediately and produce an application that respond to these requirements without thinking about architecture.\\nBut when it come to develop a reliable, maintainable and extensible system, Architecture is our core activity because it helps us\\nanswer questions regarding how the system behaves with millions of users at the same time, __security threats__ and __delivery time__.\\n<span style={{color: \\"purple\\"}}>__Architecture meets quality requirements__.</span>\\n\\n# Architecture Styles\\nI found the definition given by David Garlan and Mary Shaw in their publication titled [An Introduction to Software Architecture](https://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf)\\nan amazing reference to understand the concept of architecture styles and how it can be view in the field of computing systems.\\n\\n>An architectural style, then, defines a family of such systems in terms of a\\npattern of structural organization. More specifically, an architectural style\\ndetermines the vocabulary of components and connectors that can be used in\\ninstances of that style, together with a set of constraints on how they can be\\ncombined. These can include topological constraints on architectural\\ndescriptions (e.g., no cycles). Other constraints\u2014say, having to do with\\nexecution semantics\u2014might also be part of the style definition.\\n\\nFollow are the questions shared by these two pioneers in the discipline of software architecture, answering these questions\\nwill remarkably help define the architecture that fit for the system we\'re building:\\n \\nGiven this framework, we can understand what a style is by answering the\\nfollowing questions: __What is the structural pattern__,__the components__,\\n__connectors__, and __constraints__? What is the underlying computational model?\\nWhat are the essential invariants of the style? What are some common\\nexamples of its use? What are the advantages and disadvantages of using that\\nstyle? What are some common specializations?\\n\\nin the next part, let\'s explore some of the most known architecture styles\\n[Logical View](./2021-10-17-software-architecture-logical-view.mdx)\\n\\n----\\n\\n* [Software Architecture Definition by Wikipedia](https://en.wikipedia.org/wiki/Software_architecture)\\n* [The \u201c4+1\u201d View Model of Software Architecture by Philippe Kruchten](https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf)\\n* [Advancing the Practice of Software Architecture by Software Engineering Institute](https://www.sei.cmu.edu/our-work/software-architecture/)"},{"id":"devops-strengthen-your-digital-transformation","metadata":{"permalink":"/blog/devops-strengthen-your-digital-transformation","source":"@site/blog/2021-07-10-devops-strengthen-your-digital-transformation.mdx","title":"DevOps: Strengthen your digital transformation","description":"author","date":"2021-07-10T10:49:31.000Z","tags":[{"inline":true,"label":"devops","permalink":"/blog/tags/devops"},{"inline":true,"label":"agile","permalink":"/blog/tags/agile"}],"readingTime":6.275,"hasTruncateMarker":true,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"devops-strengthen-your-digital-transformation","title":"DevOps: Strengthen your digital transformation","date":"2021-07-10 10:49:31 +0100","authors":["reda"],"tags":["devops","agile"]},"unlisted":false,"prevItem":{"title":"Software Architecture: The 4+1 view model","permalink":"/blog/software-architecture-the-4-plus-1-model"},"nextItem":{"title":"Software testing from separate activity to core development","permalink":"/blog/software-testing-from-separate-activity-to-core-development"}},"content":"import \'./styles.css\';\\n\\n![author](/img/blog/devops-strengthen-your-digital-transformation.jpeg)\\n[photo source](https://www.sdxcentral.com/cdn-cgi/image/w=748,h=399,fit=scale-down,f=auto,q=85/https://www.sdxcentral.com/wp-content/uploads/2018/10/Cloudera-Hortonworks-Merge-Their-Big-Data-Efforts.jpg)\\n\\n\\nNowadays the processes used to create software have been considerably evolved from manual and human interaction to test,\\nbuild and deploy an application to a fully automated process relying on new practices and tools that help teams to \\ndeliver an update to production in few minutes or even seconds.\\nIf your organization or team still using the old methods and have the willingness to take a step toward these useful\\nand helpful DevOps practices, there are some notions to consider while taking the way.\\n\\n\x3c!-- truncate --\x3e\\n\\n# DevOps: Development and Operations fusion\\nDevOps aims at merging or combining the software development and IT operations to accelerate software delivery while ensuring high quality and secure systems.\\nwith the adoption of agility, a team could respond to customer requirements rapidly without suspending the production environment. I would like to sum up these concepts as follow:\\n\\n   - Development and operations teams are merged into one single team where all members contributing to make\\n     the app ready to use, from dev, and test to deployment.\\n   - Product Owner and other functional roles are concerned by DevOps practices, they decide and act from feature\\n     development to application production deployment. \u200b\\n\\nBefore detailing the concepts and practices of DevOps, let\'s share some of the key benefits of either a company or an open community\\ndeveloping a product can gain.\\n\\n<div class=\\"row\\">\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Speed</h3>\\n      <p class=\\"card-content\\">Increase your velocity for faster innovation and market-changing responding by releasing updates quickly</p>\\n    </div>\\n  </div>\\n\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Delivery</h3>\\n      <p class=\\"card-content\\">Reducing the delivery time to provide customer with new features and fixing bugs quickly</p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Security</h3>\\n      <p class=\\"card-content\\">\\n      Respond and deliver quicker without losing control on quality and compliance, by including automated quality and security checking\\n      </p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h3>Reliability</h3>\\n      <p class=\\"card-content\\">Manage your development, test and production environment in a managed manner to test that every changes or updates is functional so the end user is always provided with a reliable product </p>\\n    </div>\\n  </div>\\n</div>\\n\\n## DevOps practices\\n# Continuous Integration\\nToday chances that software is writing by more than one person are higher contrary to the shining start of the Linux story who was\\ncreated first by Linus Torvalds as a personal project. To merge code writing by different members we use the continuous integration\\nwhich is a simple idea about committing code frequently to a shared central repository on a server, then an automated conflicts resolving,\\ntest and build are triggered, this practice keeps developers focused on writing code for new features rather than debugging code merging issues\\nToday the market is full of different products that we can rely on for managing source code and continuous integration, the most famous\\nare:\\n\\n- [Github](https://github.com/)\\n- [Gitlab](https://gitlab.com)\\n- [AWS CodeCommit](https://aws.amazon.com/codecommit/)\\n- [BitBucket](https://bitbucket.org/)\\n- [Google Cloud Source Repositories](https://cloud.google.com/source-repositories)\\n\\n# Continuous Delivery\\nTime to market is a key factor many businesses usually is taking into consideration, they were always interested in how to\\ntest an idea ASAP and put that product or service in customer\'s hand and gather a quick feedback. To collect a reliable\\nfeedback and analysis how the user interact with the software there is a need to provide it in a real production environment.\\nContinuous Delivery also known as CD respond to this requirement and more through the adoption of a set of practices and tools\\nthat they will help your organization to automatically build, test and deploy a new version or small change to production\\nrapidly.\\nFind below some of the most used CI/CD platforms:\\n\\n- [Github Actions](https://github.com/features/actions)\\n- [Gitlab CI/CD](https://docs.gitlab.com/ee/ci/)\\n- [AWS CodePipelines](https://aws.amazon.com/codepipeline/)\\n- [CircleCi](https://circleci.com/)\\n- [Google Cloud Source Repositories](https://cloud.google.com/source-repositories)\\n\\n## More than CI/CD\\nWhile the continuous integration and delivery remain the most known practices of DevOps, There are others not less important\\nand should be implemented and adopted to have a standard compliant Workflow as illustrated in the following drawing:\\n![DevOps Workflow](/img/blog/devops-workflow.jpeg)\\n\\nOnce a change or new feature has been deployed, we need to operate on, to configure for example an endpoints or enable\\nthat feature using a distributed configuration system. Then we need to monitor so see how the a deployment impacts the \\nuser experience and performances. Automated the monitoring and capturing logs from the application, analyzing them in order\\nto ensure a 24/7 service availability.\\n\\nThe following cards describe some necessary practices to consider too while promoting a DevOps culture and deploying the\\ntools.\\n \\n<div class=\\"row\\">\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Microservices</h4>\\n      <p class=\\"card-content\\">Microservice architecture aims at decomposing a complex application into modules developed and understood by different people</p>\\n    </div>\\n  </div>\\n\\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Infrastructure as Code</h4>\\n      <p class=\\"card-content\\">is a practice in which infrastructure is provisioned and managed using code and software development techniques</p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Monitoring and Logging</h4>\\n      <p class=\\"card-content\\">\\n      Applications logs and data are collected and analyzed, and infrastructure metrics are monitored to trigger scaling up/down\\n      or respond to an unexpected event.\\n      </p>\\n    </div>\\n  </div>\\n  \\n  <div class=\\"column\\">\\n    <div class=\\"card\\">\\n      <h4>Communication</h4>\\n      <p class=\\"card-content\\">Merging development and operations efforts requires a good and seamless communication and collaboration, we can rely  on different channels like chat apps and tracking-systems</p>\\n   </div>\\n  </div>\\n</div>\\n\\n# Example: How microservices and DevOps can be implemented together to transform an application?\\nWith the adoption of microservices architecture, your pipeline could take another structure, in the following example\\nwe illustrate an old and a modern pipeline for an hotel booking application:\\n__Booking Application__ is an application that cover mainly 3 modules as follow:\\n\\n![Hotel Booking Application](/img/blog/hotel-booking-app-pipleline-v1.svg)\\n*The large Hotel Booking App team commits their changes to a single source code repository. The path from code to production is long and onerous and involves manual intervention*\\n\\nNow let\'s discover how ce can transform our hotel booking application to make it easily extensible, maintainable and continuously\\nupdated. We will decompose the monolithic application into small loosely coupled services, and put in place a modern pipeline\\nto help us respond rapidly to new requested changes and deliver quicker new versions. The figure below demonstrate the new application\\narchitecture and pipeline structures:\\n\\n![Hotel Booking Application](/img/blog/hotel-booking-app-pipleline-v2.svg)\\n*The microservices-based application consists of a set of small, decoupled services, developed, tested and deployed independently thanks to a fully automated CI/CD*\\n\\n---\\n\\n\\n**NOTE**\\nIn the above figure, we mention gitlab CI/CD as our continuous integration and deployment platform.We can use\\nany other combination of DevOps tools from the ones listed in previous paragraphs. \\n\\n\\nFinally, I would like to share my thoughts about DevOps, First of all is all about a culture, a change that the organization should be prepared for, I\u2019m think about people within our teams who are comfortable with old processes to deliver software, we should walk with them side by side during the promotion phase to help them understand and believe in the benefits they can gain with these new ways of creating software.\\n\\nThe second point is about the tools, today there are plenty of DevOps tools we can choose from, In my point of view having a whole one platform that provides implementations for major needed tools is extremely recommended such as CI/CD, tracking systems, code source repository, etc\u2026\\n\\nThe last point is about the word \\"continuous\\" because once we put in place these DevOps tools and spread the practices we think that the job is done but is all about continuous improvement and surely new issues will be faced and we need to be prepared to analyze and solve them again, this what engineering is about.\\n\\n----\\n* [AWS DevOps](https://aws.amazon.com/devops/what-is-devops/)\\n* [Microservices Patterns by Chris Richardson](https://www.manning.com/books/microservices-patterns)"},{"id":"software-testing-from-separate-activity-to-core-development","metadata":{"permalink":"/blog/software-testing-from-separate-activity-to-core-development","source":"@site/blog/2021-03-06-software-testing-from-separate-activity-to-core-development.mdx","title":"Software testing from separate activity to core development","description":"author","date":"2021-03-06T12:56:31.000Z","tags":[{"inline":true,"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":5.145,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-testing-from-separate-activity-to-core-development","title":"Software testing from separate activity to core development","date":"2021-03-06 12:56:31 +0100","authors":["reda"],"tags":["testing"]},"unlisted":false,"prevItem":{"title":"DevOps: Strengthen your digital transformation","permalink":"/blog/devops-strengthen-your-digital-transformation"},"nextItem":{"title":"Few and permanent rather than many and intermittent","permalink":"/blog/few-and-permanent-many-and-intermittent"}},"content":"![author](/img/blog/software-testing-from-separate-activity-to-core-development.jpeg)\\n[photo source](https://www.railwaysignalling.eu/istanbul-ankara-high-speed-railway-aims-to-open-in-february2014/cropped-b-broshure-forside4-jpg)\\n\\nI remember these days when we used to write testing code after implementing the software features to make sure\\nthat the code is working, avoid bugs. Besides, we create some scripts to automate interactions with the program.\\n\\nWriting testing code was a separate activity from programming.\\n\\n# Agile redefine our testing philosophy\\n\\nWhen Agile was born in early 2000 as the fruit of a working group including Martin Fowler, The manifesto defines how agile methods\\nwill speed up the software development to bring new products to market faster. The testing activity starts taking a new\\ndefinition from a side part activity to undistinguished work of software development, Especially with \\nthe Xtreme programming method that takes the TDD as its core paradigm. We will cover in further detail the TDD in a\\ndedicated section below, but first, let\'s review the different types of tests.\\n> NB: there are plenty of test types we can code and run, in this post, I share with you only the main ones\\nfrom a developer\'s perspective. Below is a non-exhaustive list of test types:\\n\\n- Functional testing\\n- Load and stress testing\\n- Usability testing\\n- Security and Vulnerability testing\\n- Monkey testing\\n\\n## Unit tests\\nThis type of software testing covers small and isolated components of software to make sure they behave as expected,\\nNowadays these code fragments are writing by the developer itself while implementing the product\'s features. There are some\\nproperties that these tests should hold\\n- They should be fast.\\n- Run frequently as part of the continuous integration process, so they are executed after each commit.\\n- They need to be readable, Maintainable, and Trustworthy.\\n    \\n## Integration tests\\nThe main role of this type of test is to confirm that the independently developed components that compose an application\\nor a system are working as expected together. For example in a Layered architecture-based application, you may want to make\\nsure that your DAO or Repositories are working fine, or verify the web layer interactions with the business layer are matching\\nthe desired behavior, here where the integration tests come to.\\n\\nIntegration tests may cover a variety  of scenarios, here are some common ones:\\n- Testing 2 or more components interactions and data flow\\n- Verify the data sent by a component is well-formatted by another one before processing it.\\n- Verify components handle cases where they lost connectivity between them.\\n    \\n## End to End Tests\\nThey may take also the name of broad-stack tests or full-stack tests, Despite their slow time of execution they constitute\\nan important value for the product\'s quality as they test the behavior of the application in a real environment.\\nThey are intended to reproduce the end-user interaction with the product and make sure that every feature is responding as it what designed.\\nThese tests have the advantage of testing the software with all its parts connected, on the other hand, they have the\\npain of slower to run and difficult to maintain, the reason why it\'s recommended to reduce the number of these tests compared to \\nunit or integration ones as shown in the following figure:\\n\\n![the test pyramid](/img/blog/test-pyramid.png)\\n\\n# TDD: Test Driven Development\\nSince its apparition there is many books have been published, I recommend reading one or more to understand this philosophy is deep and acquire\\nsolid skills for writing tests, Here is my must-read <span>**Test Driven Development By Example**, __Kent Beck__ </span>\\n\\n>I\'ll define TDD as a programming style in which production and test code are written together, with the production code\\n> just after test one.\\n\\nBy now we have described the TDD, there are some rules to take into consideration:\\n- Rule one:     We don\'t write production code before we\'ve written a failing test.\\n- Rule two:     We don\'t write additional tests than sufficient to implement our first scenario of a use case.\\n-  Rule three:   We don\'t write more production code than needed to pass the currently failing test.\\n    \\nAs the TDD is relatively becoming a mature discipline, it started encouraging further innovations derived from it, such as BDD\\nwhose main goal is to get developers, testers, and people from the business to talk to each other. In other words \\n> the real intent is to try and work out what your customer or business wants from the software before you start working on it\\n\\nOnce we adopt the TDD and start working this way with testing side by side with production code, we\'ll write many tests\\nper use case or (feature), and more by component and you can imagine the numbers of lines we\'ll end up with,\\nmanaging tests code became as important as production one. I encourage you to keep tests clean.\\n__what makes a test clean__? Readability, shortness, and expressive. The following snippet shows an example of a test written\\nwith the intention to make it clean, but surely the is no perfect example to follow, just keep in mind to give your test code your attention.\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    // given a booking id\\n    BookingId bookingId = \\"48e58688-adc2-4e3d-be9d-f5129723b351\\";\\n\\n    // when\\n    Either<AcceptBookingError, BookingResponse> either = acceptBookingUseCase\\n                                                          .accept(bookingId);\\n\\n    // then\\n    assertThat(either.get().getStatus()).isEqualTo(BookingStatus.ACCEPTED);\\n  }\\n```\\nThere is another concept that makes our tests more readable, convenient, and easier to maintain, **Domain-Specific Testing Language**\\nThe idea is to create a set of functions and utilities to hide the details of the implementation of your test, the example above we can write\\nit this way\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    giving()\\n        ._a_bookinId()\\n    .when()\\n        .we_accept_a_booking()\\n    .then()\\n        .the_booking_should_has_accepted_status();\\n  }\\n```\\n\\nAs described by __Robert Martin__ in his book __Clean Code__ a clean test follow other rules that form the F.I.R.S.T acronym\\n\\n    - Fast: Tests shoud be fast\\n    - Independent: Tests should not depend on each other\\n    - Repeatable: Tests should be repeatable in any environment\\n    - Self-Validating: The tests should have a boolean output\\n    - Timely: Tests should be written before production code.\\n    \\nFinally, we want to think about tests as the compass to reach our destination which is the final secure, viable, and high-quality product we build.\\n\\n----\\n* [Martin Fowler\'s blog](https://martinfowler.com/testing/)\\n* [Clean Code Book by Robert C.Martin](https://www.pearson.com/us/higher-education/program/Martin-Clean-Code-A-Handbook-of-Agile-Software-Craftsmanship/PGM63937.html)\\n* [Cucumber Blog](https://cucumber.io/blog/bdd/intro-to-bdd-and-tdd/)\\n* [Agile Alliance](https://www.agilealliance.org/glossary/tdd/)"},{"id":"few-and-permanent-many-and-intermittent","metadata":{"permalink":"/blog/few-and-permanent-many-and-intermittent","source":"@site/blog/2020-11-29-few-and-permanent-many-and-intermittent.mdx","title":"Few and permanent rather than many and intermittent","description":"author","date":"2020-11-29T23:30:30.000Z","tags":[{"inline":true,"label":"approach","permalink":"/blog/tags/approach"},{"inline":true,"label":"processes","permalink":"/blog/tags/processes"},{"inline":true,"label":"methods","permalink":"/blog/tags/methods"},{"inline":true,"label":"thinking","permalink":"/blog/tags/thinking"},{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"developer","permalink":"/blog/tags/developer"}],"readingTime":4.32,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"few-and-permanent-many-and-intermittent","title":"Few and permanent rather than many and intermittent","date":"2020-11-29 23:30:30 +0100","authors":["reda"],"tags":["approach","processes","methods","thinking","software","developer"]},"unlisted":false,"prevItem":{"title":"Software testing from separate activity to core development","permalink":"/blog/software-testing-from-separate-activity-to-core-development"},"nextItem":{"title":"Mentoring a new junior teammate from day 1 to","permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to"}},"content":"![author](/img/blog/few-and-permanent-many-and-intermittent.jpg)\\n[Photo by Rachen Buosa](https://garden.lovetoknow.com/image/224771~handwithseedlings.jpg)\\n\\nThis post\'s title is an old quote I\'ve heard since my early edge, but I never gave it much attention or tried to go beyond this phase, just some words shared by older people in my family. Unfortunately, it took me years before I mind the importance of continuously complete small tasks and cut off with the idea of doing the whole job at once.\\nThanks to agility I\'m changing my mind and acquiring new ways of working and producing.\\nBefore sharing with you why and how splitting any job or mission into small  tasks helped me to achieve goals, I would like to share the pain encountered while trying to provide many efforts at once.\\n\\n# Many and intermittent\\nI remember the school-age when I was trying to prepare for my exams, I  always adopt the same strategy by spending a whole day revising my courses, doing exercises, and once I got tired I close my books mark the material as completed. I often succeeded in my exams but many times I recognize that I could do better, but who cares, I wasn\'t obsessed about getting the highest score.\\n\\nWhile I\'m writing these lines, I remember the time when I want to get abs and being fit, I can\'t tell you that my motivation was something other than having the summer body. As a consequence, I start going to the gym and training in late April, But for 3 years consecutively, and contrary to my exam story, I\'ve never reached my goal even though exercising 6 times per week for not less than two months.\\nFrom these two stories shared above, I retain one lesson providing much effort in a short period may, or not work.\\n \\nBut what if I could change something to increase my chances to get a shaped body, maybe be coached by a professional! Yes, I did, maybe follow a restricted diet! Yes, I did, the only thing that I could do and not did it is starting my program earlier and going slowly but surely.\\n\\n# Few and permanent\\nA few years ago I\'ve had the opportunity to discover agility at my university, then I worked on an agile project, 1 month after starting the project our web application was in production, users interacting with and we are having feedback, this is really amazing and so satisfying. I do believe that the key rules for such success were\\n - defining small but valuable feature\\n - continuously delivering\\n\\nBreaking a big task down into small, more feasible ones helped me avoid procrastination and an overwhelmed workload. Here are some steps to follow for breaking a task down, but remember that you\'re the only one capable of doing that depending on the context, the knowledge, and priorities:\\n\\n    1 - Make sure you visualize the big picture, that means what the end product\\n        or make sure you visualize\\n    2 - Think about the order, which one should be completed first, second,\\n        and so on...\\n    3 - Define milestones:  make a short plan which will help you stay\\n        on track.\\n    4 - Complete your tasks early to have additional time for a final review\\n    \\nI do believe that permanent iteration pays in the end, with the adoption of a few concepts we gain confidence and progression:\\n\\n - Going slowly, how many times have we heard that? but Have we ever enjoyed it as much as we can. Going slowly means to me doing things at my pace while giving all my attention and concentration to do it the right way and achieve high quality. Consider coding a small program or write a report, try to do it rapidly and at once, then do it slowly over 3 times within 1 day, then compare your results, I have no doubt that quality will differ.\\n - But Surely, yes make sure at any stage, you are performing with your best efforts, concentration, and passion.\\n - While doing things over many periods, make sure at the end of each milestone you create something tangible, deliverable, and useful.\\n - With dedicated attention to detail, because details make the difference.\\n \\nHow the rule of \\"few and permanent\\" affected my motivation and productivity:\\n - When I started scheduling my job and tasks as few ones completed over many steps, I begin to feel more confident, and sure about my achievement. In my unconscious mind, I\'m convinced that I\'ll reach the expected goal whatever how many iterations I\'ll go through.\\n - My motivation and passion are often at the top, as completing tasks that are tangible, apparent, and useful. As a software engineer, I do love to deliver small features as soon as they can be deployed to production and being used by end-users, But this is certainly true in other fields of application.\\n - As my tasks are small, they are completed early so I can get feedback on their useless then I\'ll iterate to improve and optimize, rather than reviewing a whole job with many comments and issues to handle.\\n \\nWe always need to remind that\\n > Overwatering can kill flowers, a moderate and continuous one give them chances to grow up"},{"id":"mentoring-a-new-junior-teammate-from-day1-to","metadata":{"permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to","source":"@site/blog/2020-09-01-mentoring-a-new-junior-teammate-from-day1-to.mdx","title":"Mentoring a new junior teammate from day 1 to","description":"author","date":"2020-09-01T07:56:31.000Z","tags":[{"inline":true,"label":"team","permalink":"/blog/tags/team"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"share","permalink":"/blog/tags/share"},{"inline":true,"label":"mentor","permalink":"/blog/tags/mentor"}],"readingTime":6.42,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"mentoring-a-new-junior-teammate-from-day1-to","title":"Mentoring a new junior teammate from day 1 to","date":"2020-09-01 07:56:31 +0100","authors":["reda"],"tags":["team","collaboration","share","mentor"]},"unlisted":false,"prevItem":{"title":"Few and permanent rather than many and intermittent","permalink":"/blog/few-and-permanent-many-and-intermittent"},"nextItem":{"title":"is our scoping was successful?","permalink":"/blog/is-our-scoping-was-successful"}},"content":"![author](/img/blog/mentoring-a-new-junior-teammate-from-day1-to.jpeg)\\n[Photo by Ian Schneider](https://unsplash.com/photos/PAykYb-8Er8)\\n\\n# Teaching in my mind \\nI always love my parents\' job, I grew up in a family of two teachers, later my dad became a school principal. They were\\nsharing every day their experiences, funny situations with students, and emotions. In addition to all this\\n information about teaching, I retain one thing that I feel it\\n > Teaching others is such a satisfying feeling, especially if you can observe their progression along the time\\n\\nthese concepts were carved in my subconscious mind since then. I remember in mid-high school I went to ask about a\\n course in a private school, After introducing my self the principal proposed to me teaching Adobe Photoshop and web\\n  concepts, Without diving into the details of this journey, I do appreciate it.\\n  \\nTime passes and I find myself several times in the shoes of a teacher, the story I share in the next paragraph is\\n quite different from teaching, but has many similarities I wanted to write down.\\n \\n# Mentoring someone, who decided?\\nIn a company, this approach may be part of its culture, So the HR team once they hire a new joiner, they ask a\\n senior who wants to play the role of mentor, certainly this is a voluntary decision and not a hierarchical one, as mentoring requires first of all the initiative and passion to do it.\\n  This is not a work task to complete, this is a\\n   mindset to share with love.\\n   \\nRegardless of having this culture or not, in many cases, a spontaneous relationship between a senior and a new team\\n-member took place, mainly due to their personalities rapprochement. Then we begin to talk about mentoring as the\\n senior introduces his new team-mate to other teams, lets him discover departments, work methods, and any knowledge\\n  that may help him be  well integrated.\\n  \\n# What should we have to succeed in a mentoring program?\\nIn my opinion, we need to behave like coach  and trainee, or like teacher and student. As a mentor, Having this\\n passion for knowledge sharing, feeling so satisfied while seeing others growing up, Being generous when it comes to\\n  advising and guiding are all \\"must-have\\" values we believe in. Regarding skills, we need to be good in\\n   communication, the capacity of thought, and patience.\\n  \\n  On the other side, the trainee needs some skills, or call them behaviors like being good\\n   listener, a hungry man who wants to enrich his knowledge by asking for details, but certainly without disturbing\\n    the mentor, Because this one is meanwhile an employee with tasks and missions to complete, So as a trainee we keep\\n     calm and patient when we don\'t have some information or answers immediately. For the trainee the mentoring\\n      should represent an opportunity to know more, have different points of view, but in any case should impact\\n       our analysis capabilities, and influence our decision-making, we have to protect our autonomous which is\\n        the most valuable goal we target. \\n\\n# Day 1\\nI\'ve been delighted to welcome with my team our new colleague who has just graduated and he is today starting his\\n first job as a software engineer. I took him for a short tour to discover the office, the facilities, and our\\n  beautiful kitchen corner where often we share coffee time.\\nI think the first impression is very important the reason why my team and I gave it all our intention to make it at\\n the same time funny and useful for our team-mate. We wanted to help him feel very comfortable. For today apart\\n  from receiving his laptop and tools no code or pull request.\\n \\n# Day 2 \\nA short introduction to explain the project views, our work methods, and collaboration best practices we believe in\\n within our entity. As a software engineer focusing on technical staff, I suggested putting our junior colleague in\\n  touch with our scrum master for the purpose to learn about agility, how we use SCRUM as a reference with all its\\n   rituals from daily stand up to sprint retrospective.\\n   \\nNow it\'s coffee time, a good moment to show him an important value within our company, generosity especially when it\\n comes to knowledge, we believe that sharing is such a powerful value that helps all of up to grow up together and\\n  progress whatever our field of expertise. Although everyone has a clear and well-defined role within the team, being\\n  aware of what others are doing is crucial cope with any absence or unavailability.\\n\\n# Day 3\\nOur new colleague is very motivated and curious, his questions are dept and constructive, but unfortunately, I could\\n not answer all of them immediately, I let him know that he can also email me and I\'ll answer him later once I finish\\n  a prioritized task. The lesson here is very simple, a question may be answered later but should never end up\\n   without any response. To avoid any confusion or lack of trust that may affect my relationship with my junior\\n    colleague. \\n   \\n# Day 4\\nCollaboration over delegation is what happens when we have less time to explain or teach someone else how to complete\\na task or do a job, but this approach is too bad. As a mentor, I prefer to collaborate with trainees walking together\\nside by side armed with passion and patience with one goal: helping him being autonomous instead of completing tasks\\nfor him quickly no matter how much time will take, training others is always a pleasure and a must-have for a mentor.\\nA mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n> A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n    \\n# Day 5\\nAre you a good listener? I was convinced as a mentor I need to listen a lot to my trainee, give him all the time to \\nexplain his point of view or vision even though I\'m not okay with or I\'m not sure he is not on the right way, keep calm\\nand let him finish, I see many colleagues when a junior comes with a new idea, or an initiative, they quickly try \\nto crop believing that is it a wast time, Unfortunately, this behavior may dramatically degrade a junior\u2019s \\nself-confidence and his motivation for future initiatives.\\n   \\n#  Next Day\\nThe days go by one after the other and I\u2019m getting so happy to see our team growing up and how our new junior colleague\\nis taking over subjects and becoming autonomous, This trusted and honest relationship we built together is bringing\\nwhat is expected to be. I do believe that mentoring someone else is nothing other than giving him the right \\nand the necessary tools to dive alone with confidence into any subject. This friendly relationship helps us learn\\nfrom each other, I do appreciate supporting my colleague during his first days within our team and in the company.\\nHis questions, exchanges, and remarks let me learn how to communicate and explain my ideas and point of view at a \\nlow level using simple and easy expressions to understand when talking to a debutant person or someone outside of \\nmy field of expertise.\\n   \\n# It\'s been a constructive journey\\nAlong the way, I learned a lot of things and values I would like to summarize below:\\n\\n    * Stay humble when you talk to junior or debutant people.\\n    * There is always something to learn from others whatever their expertise level.\\n    * Share and publish your knowledge to help serve and improve yourself and others.\\n    * Gain respect and recognition\\n    \\n*publish, share, exchange to help serve, shape and improve the world*"},{"id":"is-our-scoping-was-successful","metadata":{"permalink":"/blog/is-our-scoping-was-successful","source":"@site/blog/2020-06-22-is-our-scoping-was-successful.mdx","title":"is our scoping was successful?","description":"author","date":"2020-06-22T07:56:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"agile","permalink":"/blog/tags/agile"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"},{"inline":true,"label":"workflows","permalink":"/blog/tags/workflows"},{"inline":true,"label":"practices","permalink":"/blog/tags/practices"},{"inline":true,"label":"methods","permalink":"/blog/tags/methods"},{"inline":true,"label":"processes","permalink":"/blog/tags/processes"}],"readingTime":4.085,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"is-our-scoping-was-successful","title":"is our scoping was successful?","date":"2020-06-22 07:56:31 +0100","authors":["reda"],"tags":["software","agile","engineering","workflows","practices","methods","processes"]},"unlisted":false,"prevItem":{"title":"Mentoring a new junior teammate from day 1 to","permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to"},"nextItem":{"title":"From small team to large one","permalink":"/blog/from-small-team-to-large-one"}},"content":"![author](/img/blog/is-our-scoping-was-successful.jpg)\\n\\nA new project is in the pipeline and we are ready to kick off this new challenge, Our team is ready and full of energy\\nand enthusiasm. Scoping sessions are scheduled this week.\\nThe first session started with a short description of the project, making the focus on the business and strategic\\nimpact and how will help the company to accelerate its digital transformation in the perspective of developing\\nnew digital products and cloud-based offerings. It\u2019s time to finish the workshop with one conclusion all team members\\nshare the same frustration regarding where we want to go.\\nDuring the week these sessions succeeded one after the other and still having a blur vision, confusing features, and also\\nan organization that we believe is not convenient to drive the boat to the shore.\\n \\n# What were the key points that might cause this blocking situation?\\n\\n## Exploring the real value\\nAs a product owner, I have to gather the maximum information about the customer business, their strategic goals, and \\nwhere they want to land once the project takes off. I remember this quote from Dassault Systemes [Dassault Systemes !](http://3ds.com)\\n>\\n    If we ask the right questions, we can change the world\\n    \\nAsking pertinent questions is crucial to understand the business and the desired value we expect to provide. For a \\nsuccessful scoping workshop, this job should be prepared before and these reflections and analysis at least started\\nin order to keep the team members away from any frustration or defeatism.\\n \\n## Why The role of the Product Owner is very important at this stage?\\nThe product owner is the guard of the vision and customer value, keeping the train on track requires a lot of effort \\nregarding the business understanding and mapping this knowledge to user stories that designers, developers are easily\\nable to take in charge and implement.\\n\\nBased on our experience, our product owner iterated regularly over the backlog to refine the items and get rid of \\nthe irrelevant ones, each time he was approached to revise a business rule.\\n \\n## Specifications and requirements\\nWhat kind of format our documents should follow to write down the specifications and requirements and how many details\\nwe should draft? this question is indispensable to answer before starting, the more we give attention to what to write\\nthe more implementation will be easily taking into consideration all constraints and customer-specific requirements\\nsuch as solution\u2019s time responding, availability, number of future users. These notes help considerably when it comes\\nto architecture design and technical stack decisions.\\n    \\n## Deliverable frequency and type\\nWhile in agile project continuous delivery is at the heart of it and shouldn\u2019t be part of discussions but the frequency\\nof delivery and type of deliverable could be, The reason why a team should agree and state early these points.\\n\\nThe adoption of continuous improvement is totally appreciated while the business is evolving but we have to pay attention \\nbefore investing in this area causes often lead to delivery postponed even contract issues.\\n \\n## Cost\\nSometimes and due to technical choices such as licences, do not forget to include them in your budget estimation and\\n let stakeholders know about them, When it comes to money transparency is the key to spread trust and avoid\\n  undesirable surprises. the rules are:\\n\\n* calculate an accurate budget and make sure all elements are included.\\n* define a process that helps to keep the budget flexible regarding features without over budgeting.\\n\\n## Communication\\nWhatever the project scope or size, communication is a key to a successful customer value and team satisfaction, Defining\\ncommunication channels, rules, and tools between stakeholders and project team can considerably impact project \\nprogression and target achieving. Communication also implies some values such as transparency about the team\u2019s \\ncapabilities what we can and we cannot do, these kinds of statements should be communicated as soon as possibl\\nto help the customer make the best decision.\\n\\nIn my point of view, I prefer to avoid the usage of multiple communication tools and formats with our \\nstakeholders (telephone, email, video-conference, meetings\u2026), this can help keep our exchanges simple, effective.\\n\\nRegarding internal communication between team members, Personally, I have a lot of appreciation for meetings\\nor face-to-face discussion believing that is the quick and right way to argue a decision or explain a point of view \\nto convince my team-mates of any technical choice. Otherwise using a project management tool to track and monitor\\nis still very useful in order to keep everyone updated and everything documented.\\n   \\n### Flexibility and adaptation\\nAgile practices come to solves today\u2019s project issues and pains, but at any stage, we should be wedged, In my opinion, we have\\nto cope with challenges, involve the team in every decision, think differently and act like one. Scoping is the stage\\nwhere we invite all involved people to the same boat with one goal is to reach the destination."},{"id":"from-small-team-to-large-one","metadata":{"permalink":"/blog/from-small-team-to-large-one","source":"@site/blog/2020-05-22-from-small-team-to-large-one.mdx","title":"From small team to large one","description":"author","date":"2020-05-22T12:56:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"team","permalink":"/blog/tags/team"},{"inline":true,"label":"communication","permalink":"/blog/tags/communication"},{"inline":true,"label":"agile","permalink":"/blog/tags/agile"},{"inline":true,"label":"organization","permalink":"/blog/tags/organization"}],"readingTime":4.805,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"from-small-team-to-large-one","title":"From small team to large one","date":"2020-05-22 12:56:31 +0100","authors":["reda"],"tags":["software","team","communication","agile","organization"]},"unlisted":false,"prevItem":{"title":"is our scoping was successful?","permalink":"/blog/is-our-scoping-was-successful"},"nextItem":{"title":"A 2 months remote work experience","permalink":"/blog/a-two-months-remote-work-experience"}},"content":"![author](/img/blog/from-small-team-to-large-one.jpeg)\\n\\nDuring the latest months, I\u2019ve been asked to move from a small agile team to a large one, why? what changes should I\\n cope with? what obstacles to tackle and what kind of achievements we accomplished? here are the experience story and\\n  the learned lessons\\n  \\n## Small Agile team\\nI\'ve been part of a small agile team of 4 developers, tech-lead, UX designer, Scrum master and a Product owner. Working \\nwith scrum method, I do believe that this team size was just perfect as the communication is too smoothly and\\n decision making is quick and effective. We developers were using the git flow branching strategy. A new branch is\\n  created for each user story, commit added, pull request created and reviewed then merged into the master. Product\\n   owner manage easily his backlog. The scrum master scheduled perfectly our scrum sessions and these one were\\n    gainful in term of business understanding and story telling. Thanks to the great work of our UX/UI design\\n     integrating the UI and implementing the user experience is definitely optimal thanks to sketch software.\\n     \\n>The team size was a key element to a successful journey, providing a great added value at the end of each sprint\\n while delivering high-quality  software with  security standards-compliant.\\n\\n# Communication and collaboration\\nWhen is come to working together and collaborating with a team, communication is a key factor toward success. While\\n this is easy for a small team as we are often setting around the same table or in the same open space we communicate\\n  orally and  directly trying always to avoid emails and chat as much as we can, but for sure without omitting to\\n   give each  one its  private space and time to concentrate on his tasks with no disturbs. In the other hand and\\n    once the team getting larger we first obstacles we start to face is how to communicate and exchange, even harder\\n     for taking a decision. Another point is managing  meetings which means to manege finding rooms especially as we\\n      are working in a co-working building then as we have to take into consideration each one is calendar. Now we\\n       are in the meeting room with more than 12 team-mates it took longer than expected, deviation and rarely we end\\n        up with a defined actions list assigned people.\\n>I believe either we are a small or a large team there are the right tools and ways to communicate, We need just to\\n> avoid  applying the ones that work fine for a small team in the context of a  large team and vice versa.\\n\\n# Support and expertise\\nOne of the greatest points when you are part of a small team, is that you know each member is scope of expertise\\n which is very  useful and effective when it comes to coordinate whether to change a piece of code, to integrate a new\\n  technology or document a feature. Unfortunately this advantage disappears along the way a team begins to extend and\\n   we start to be distributed which affects our knowledge about expertise mapping in the project and for sure consume\\n    more time to find the right source to support you. \\n\\nI refer to Conway\'s law stating about organization structure footprint on their production:\\n>\\n    Organizations which design systems ... are constrained to produce designs which are copies of the comminication\\n     structures of these organizations. \\"Melvin Conway\\"\\n     \\nIn our organization we understood this quickly and thanks to our agile coach we reorganize our teams and introduced\\n some practices to continue delivering added value feature continuously.\\n \\n## Single Point of Knowledge\\nAs our team begin to grow and having many members than needed in an agile model, I observed in the lake of\\n coordination, close collaboration, and effective communication, new single points of knowledge taking  place in\\n  our organization as some people with or without attention monopolize and hold in their corner some specific\\n   knowledge or expertise which impacts the pace of productivity, innovation, and rotation.\\n   Contrarily to the case of a small team where the knowledge and responsibilities are well shared and all members\\n    have almost the same level of knowledge about the project which avoids the \'indispensable member\' obstacle and\\n     lead to transparent and rapid rotation and delivery.\\n     \\n## Team representative and interface\\nWhen I was part of a small team there was a member who keeps the team informed, knows the organization\u2019s culture, \\nand promotes best practices that make our entity inspiring. Often this role appears naturally cause the person playing\\n it holds some qualities that help him representing the team, interfacing with management contrarily in the context of\\n  the old school team, a project manager take this responsibility. But can we have many representatives (Leaders) in\\n   the team? In my point of view, YES as each member has a different style therefore we can boost the team\u2019s \\n   productivity and creativity. Shared leadership led also to reduce responsibilities stress, thrive solidarity. \\n   For the company we observed many advantages once we made the move to this model:\\n* Share the the bigger picture with everyone.\\n* give the company more options.\\n* increase in decision making transparency.\\n\\nFinally, the question is can this model succeed with a large team? From my experience, this can be a huge challenge\\n for the management but also for immature teams who can considerably slow down the decision making.\\n \\nI\u2019ve been part of different teams small and large and I believe that adopting the right management style and\\n establishing a transparent and honest relationship whether between team members or between teams and the management\\n  should always gain the upper hand.\\n\\nBeing the representative of your team is talking about your shared values and practices, defending your team\'s decisions\\n and choices. But in any case shouldn\'t be a position that we take over."},{"id":"a-two-months-remote-work-experience","metadata":{"permalink":"/blog/a-two-months-remote-work-experience","source":"@site/blog/2020-04-24-a-two-months-remote-work-experience.mdx","title":"A 2 months remote work experience","description":"author","date":"2020-04-24T12:56:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"remote","permalink":"/blog/tags/remote"},{"inline":true,"label":"communication","permalink":"/blog/tags/communication"},{"inline":true,"label":"workplace","permalink":"/blog/tags/workplace"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"}],"readingTime":3.46,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"a-two-months-remote-work-experience","title":"A 2 months remote work experience","date":"2020-04-24 12:56:31 +0100","authors":["reda"],"tags":["software","remote","communication","workplace","collaboration"]},"unlisted":false,"prevItem":{"title":"From small team to large one","permalink":"/blog/from-small-team-to-large-one"},"nextItem":{"title":"A 4 weeks mob programming","permalink":"/blog/a-four-weeks-mob-programming"}},"content":"![author](/img/blog/2-months-remote-work-experience.jpg)\\n\\n\\nMarch 2020 marked by many measures taken by the majority of countries in the five continents following covid-19.\\nMy company who already allowed their employees to work from home occasionally, Now they are obliged to continue\\nworking remotely for an undetermined time.\\n\\nDespite many advantages remote work bring, there are some inconveniences to manage for good productivity and effective\\nwork.\\n\\n## Setup my home desk\\nAs I\'m working from home, I\'ve never though about setting up any similar environment like the one at the office, I\'ve\\n just being lying on the couch the whole workday or sometime I change my position a trifle.\\n Two weeks later I observed that my concentration and productivity is going down more and more, I tough having some\\n  tiredness, After exchanging with a colleague, He reveal its secret for keeping energy and effectiveness, I was\\n   surprised while hearing that setting up a similar work desk at home may highly help. I decided to take into\\n    consideration this point, Now I confirm how this changed my home working routine.\\n>I\'am 100% convinced that setting up a convenient desk at home can considerably help\\n     with commitment, concentration and effectiveness while working from home :relaxed:\\n\\n## We don\'t all have an isolated room!\\nUnfortunately living in Paris or any big city around the world has its disadvantage when it comes to spacious\\n lodgement.\\nFor the parents with their children at home, for the friends sharing the same room, dealing with this limitation is a\\n key point for relaxed home working without impacting our collaboration and performance. From my point of view, we can \\n manage this issue by rotating our work hours and companies should tolerate this option letting parents working while\\n  their children are sleeping.\\nOverall having a private room stay the best option for enhancing what has been mentioned about setting a home desk.\\n\\n## Effective communication\\nIn the field of software engineering, Often discussing new technologies, good practice or some technical decision\\nbrainstorming may be held while we are sharing a coffee with team-mates in the cafeteria, or around a table in a\\nmeeting room, that means we have a face to face communication, In my case, I do love this way as it brings to me a\\nsmooth and flexible tools using my body language to explain and talk about a topic.\\nUnfortunately while working from home this manner is no longer afford the same way we do at the office. But thanks to\\n recent video-conference platforms we can continue relying on our communication habits taking into consideration some \\n rules for en effective exchanging, follow the ones I\u2019m using:\\n     \\n* Turning my camera on during the meetings.\\n* Wearing my usual clothes like in the office.\\n* Using a virtual whiteboard instead of the real one to explain, share and design my ideas.\\n* Turning my micro off when I\'m not the speaker.\\n* Summarizing your notes and sharing them with colleagues.\\n* Video calls or chat over emails\\n* Most important is to setup the rules with your team and colleagues to avoid disturbing each other.\\n\\n## Do not forget ourselves!\\nI noticed during the first weeks of my home working that I did not take rest and breaks regularly. So I used to\\n schedule meeting right away, sometimes at lunch time, sometimes I chain them without any pause. Few time later I\\n  recognize a lack of concentration and it becomes very disturbing to see calls and meetings notification showing up.\\nThe conclusion is working remotely does not mean working continuously and do it so may substantially impact our\\n physical and mental health, the reason why I decided to schedule my rest and breaks during the work day and stay\\n  away from work during these time slots.\\n>\\nWhile working from home, never forget to take rest and breaks during a workday as it protects us\\nfrom health risks and mental disturbance.\\n\\n### So far so good\\nBeing armed with the right tools and techniques helped me keeping a good mood with my team-mates, enhancing my\\n productivity and enjoying my workday from home.\\n >\\n    Wherever we are, let\'s do our job with love and passion."},{"id":"a-four-weeks-mob-programming","metadata":{"permalink":"/blog/a-four-weeks-mob-programming","source":"@site/blog/2020-04-02-a-four-weeks-mob-programming.mdx","title":"A 4 weeks mob programming","description":"author","date":"2020-04-02T12:56:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"},{"inline":true,"label":"agile","permalink":"/blog/tags/agile"},{"inline":true,"label":"team","permalink":"/blog/tags/team"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"mob programming","permalink":"/blog/tags/mob-programming"}],"readingTime":2.98,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"a-four-weeks-mob-programming","title":"A 4 weeks mob programming","date":"2020-04-02 12:56:31 +0100","authors":["reda"],"tags":["software","engineering","agile","team","collaboration","mob programming"]},"unlisted":false,"prevItem":{"title":"A 2 months remote work experience","permalink":"/blog/a-two-months-remote-work-experience"},"nextItem":{"title":"A 5 years journey of software engineering","permalink":"/blog/a-five-years-journey-of-software-engineering"}},"content":"![author](/img/blog/a-4-weeks-mob-programming.jpg)\\n\\n\\nIt\'s sound strange at first, difficult to manage, and certainly understanding the\\nreasons behind and how can we take advantage of this practice introduced a couple of years ago.\\n\\nMob programming is an approach introduced to the agile world in the purpose of helping the teams\\nestablish a common development mindset, sharing the same principles to design and code.\\n\\nA few months ago my team and I started a new project aiming at providing a digital platform\\nfor developers to help them accelerate their time to market. The platform  offers a multiple  \\nservices such as creating web application scaffold, source code repositories, build pipeline\\nwith all high-quality stages like security check, team management and deployment environment.\\n\\nObviously the project size is enormous and requires a high quality architecture design,\\ndistributed systems best practices and synchronous coding styles so during the scoping and framing\\nphases we decided to adopt the mob programming approach to share and communicate architecture decisions,\\nlean our performances with the goal to promote our autonomy when it comes to developing user stories\\nindependently or separately.\\n\\nour mob programming sessions are scheduled for the whole workday for 4 weeks consecutive,\\nwe team up in the same room having only one keyboard and one big screen. Each developer takes control\\nof the keyboard and code for 10 minutes. I believe that respecting the mob programming rules\\nis a key to success in this experience which is full of learning for developers but also for the\\nquality of the product as we build together the skeleton.\\n\\nI would like to share with you all the rules we followed during our sessions:\\n> * having a comfortable and spacious room with all the necessary tools like big screen and a mechanic keyboard :v:\\n> * defining roles before each session, we\'ve had the Driver who types in code and Navigator who discuss the idea\\n> and guide the Driver.\\n> * respecting timing is a key, it\'s better to hand the keyboard over with a broken test than overtaking.\\n> * we\'ve been driven by basic user stories at the beginning in order to focus on technical architecture.\\n> * we discuss, debate and argue our ideas when we think they are right, no one or idea should be discarded.\\n> * Believing that there no strict model or perfect one to follow, a retrospective is held weekly to evaluate our mob\\n> programming enrollment.\\n\\nBefore experiencing the mob programming I was asking my self how can will be productive by letting 8 developers to \\nwork on the same thing for weeks, I confess how was am I surprised by what we were able to deliver,\\na full feature bringing a real added value to our customers. If you ask me for the secret the only answer I have\\nis we were doing the work the most perfect way it could, avoiding broking the build, hard merges, and enduring\\nexchanges by emails or pull requests to agree on a design, interoperability, components communication, and best\\npractice adoption. In addition discussing ideas and approaches helped us a lot to select the best ones.\\n\\nDuring these sessions, we build a wonderful team spirit, communication protocols, and a homogeneous mindset. without\\n omitting the impact on our motivation and commitment. I was really happy with this journey and the results harvested at\\n  the end.\\n  \\nI highly recommend giving this approach a try even though for a short time, I consider practicing is the best way to\\nunderstand, evaluate and conclude if it could bring the right expectations for your team."},{"id":"a-five-years-journey-of-software-engineering","metadata":{"permalink":"/blog/a-five-years-journey-of-software-engineering","source":"@site/blog/2020-03-10-a-five-years-journey-of-software-engineering.mdx","title":"A 5 years journey of software engineering","description":"author","date":"2020-03-10T12:56:31.000Z","tags":[{"inline":true,"label":"software","permalink":"/blog/tags/software"},{"inline":true,"label":"engineering","permalink":"/blog/tags/engineering"},{"inline":true,"label":"work","permalink":"/blog/tags/work"},{"inline":true,"label":"impact","permalink":"/blog/tags/impact"},{"inline":true,"label":"path","permalink":"/blog/tags/path"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"people","permalink":"/blog/tags/people"},{"inline":true,"label":"passion","permalink":"/blog/tags/passion"}],"readingTime":3.135,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"a-five-years-journey-of-software-engineering","title":"A 5 years journey of software engineering","date":"2020-03-10 12:56:31 +0100","authors":["reda"],"tags":["software","engineering","work","impact","path","collaboration","people","passion"]},"unlisted":false,"prevItem":{"title":"A 4 weeks mob programming","permalink":"/blog/a-four-weeks-mob-programming"}},"content":"![author](/img/blog/5-years-journey-of-software-engineering.jpeg)\\n\\nJust another story of a software developer that has been started 5 years ago officially by getting my first job within the 3D Modeling Software leader provider worldwide as a junior software developer with a lot of passion and energy to write lines of code and make an impact but for sure at this stage, I can\'t see it because it wasn\'t about creating my mobile application that millions of people around the world are using or my web application with many active users a day, but a few years later it is and the product I worked on is making a great success and despite my modest contribution I do proud of this work no matter I left the company looking forward new challenges in a completely different sector.\\n\\n\\nMeanwhile, I was working with a group of friends on a platform, dreaming of reinventing the food making and delivery, we started developing \\"otchi\\" a web and mobile application for sharing meals and creating recipes but 7 months later we give on the project up and decided to stop investing our free time on this wonderful project, I confess this failure was very disappointing but I told my self \\"Hey! how can you ignore all the stuff you learned, it\'s just another try why not to repeat\\". late 2017 I joined a medical equipment manufacturer to develop software that runs on these different machines from Scanners to MRI and you can imagine that excitation I\'m experiencing to start such mission with this sentence in my head\\n>\\nI\'m going to develop software that runs on medical equipment helping in saving lives and bring smiles to those who\\n are suffering from some diseases.\\n \\nDuring this experience, I learned a lot about software development, first time to use the agile methods \\"SCRUM\\", go on production quickly and communicating with users directly, their feedbacks and comments were useful, I realized that a software developer should never be like staying at the corner of your open space implementing user stories, and whether you are developer, tester or product owner this human interaction is mandatory to well understand the needs and bring the right added value instead of delivering features.\\n\\nYes! I\'m leaving this job, this company, this role, I\'m leaving my manager because even within the best technical environment a developer can work in and enjoy his collaboration we cannot avoid the conflicts when it reaches a closed door. This time the lesson is simple as \\"human first and I\'m leaving for the interest of everybody not to run away from the confrontation\\"\\n\\nI do appreciate all the conflict discussions I\'ve had with my manager because we debated __ideas__ and visions, not\\n personas and behaviors.\\n\\nHopefully, a few months ago from writing these lines, I landed in the right place I was always looking for, Here we believe that culture and values are very important and working with people with who share the same insights and attitudes is not just titles that we put on company\'s website but that is part of everybody\'s mindset.\\n\\nHere at my current job, we develop MVPs and squads are completely autonomous for their stack and architecture choices meanwhile we all teams within this happy community are using agile methods convinced that these methods not only increases productivity but also facilitates project management, improves the quality of work and makes flexible change possible.\\n\\nIt was about sharing my career path until now in a short story, I do like to call it a journey with the faith that our job\\n is part of our overall life, not an only professional one, this is why I\'ll always trying to do it with __passion__\\n , and surrounded with analogous and complementary __people__.\\n\\n#learning is a never-ending story"}]}}')}}]);