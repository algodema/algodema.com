"use strict";(self.webpackChunkalgodema=self.webpackChunkalgodema||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"software-testing-from-separate-activity-to-core-development\\"","metadata":{"permalink":"/blog/software-testing-from-separate-activity-to-core-development\\"","source":"@site/blog/2021-03-06-software-testing-from-separate-activity-to-core-development.mdx","title":"Software testing from separate activity to core development","description":"author","date":"2021-03-06T00:00:00.000Z","tags":[{"inline":true,"label":"testing","permalink":"/blog/tags/testing"}],"readingTime":5.145,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"software-testing-from-separate-activity-to-core-development\\"","title":"Software testing from separate activity to core development","authors":["reda"],"tags":["testing"]},"unlisted":false,"nextItem":{"title":"Mentoring a new junior teammate from day 1 to","permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to"}},"content":"![author](/img/blog/software-testing-from-separate-activity-to-core-development.jpeg)\\n[photo source](https://www.railwaysignalling.eu/istanbul-ankara-high-speed-railway-aims-to-open-in-february2014/cropped-b-broshure-forside4-jpg)\\n\\nI remember these days when we used to write testing code after implementing the software features to make sure\\nthat the code is working, avoid bugs. Besides, we create some scripts to automate interactions with the program.\\n\\nWriting testing code was a separate activity from programming.\\n\\n# Agile redefine our testing philosophy\\n\\nWhen Agile was born in early 2000 as the fruit of a working group including Martin Fowler, The manifesto defines how agile methods\\nwill speed up the software development to bring new products to market faster. The testing activity starts taking a new\\ndefinition from a side part activity to undistinguished work of software development, Especially with \\nthe Xtreme programming method that takes the TDD as its core paradigm. We will cover in further detail the TDD in a\\ndedicated section below, but first, let\'s review the different types of tests.\\n> NB: there are plenty of test types we can code and run, in this post, I share with you only the main ones\\nfrom a developer\'s perspective. Below is a non-exhaustive list of test types:\\n\\n- Functional testing\\n- Load and stress testing\\n- Usability testing\\n- Security and Vulnerability testing\\n- Monkey testing\\n\\n## Unit tests\\nThis type of software testing covers small and isolated components of software to make sure they behave as expected,\\nNowadays these code fragments are writing by the developer itself while implementing the product\'s features. There are some\\nproperties that these tests should hold\\n- They should be fast.\\n- Run frequently as part of the continuous integration process, so they are executed after each commit.\\n- They need to be readable, Maintainable, and Trustworthy.\\n    \\n## Integration tests\\nThe main role of this type of test is to confirm that the independently developed components that compose an application\\nor a system are working as expected together. For example in a Layered architecture-based application, you may want to make\\nsure that your DAO or Repositories are working fine, or verify the web layer interactions with the business layer are matching\\nthe desired behavior, here where the integration tests come to.\\n\\nIntegration tests may cover a variety  of scenarios, here are some common ones:\\n- Testing 2 or more components interactions and data flow\\n- Verify the data sent by a component is well-formatted by another one before processing it.\\n- Verify components handle cases where they lost connectivity between them.\\n    \\n## End to End Tests\\nThey may take also the name of broad-stack tests or full-stack tests, Despite their slow time of execution they constitute\\nan important value for the product\'s quality as they test the behavior of the application in a real environment.\\nThey are intended to reproduce the end-user interaction with the product and make sure that every feature is responding as it what designed.\\nThese tests have the advantage of testing the software with all its parts connected, on the other hand, they have the\\npain of slower to run and difficult to maintain, the reason why it\'s recommended to reduce the number of these tests compared to \\nunit or integration ones as shown in the following figure:\\n\\n![the test pyramid](/img/blog/test-pyramid.png)\\n\\n# TDD: Test Driven Development\\nSince its apparition there is many books have been published, I recommend reading one or more to understand this philosophy is deep and acquire\\nsolid skills for writing tests, Here is my must-read <span>**Test Driven Development By Example**, __Kent Beck__ </span>\\n\\n>I\'ll define TDD as a programming style in which production and test code are written together, with the production code\\n> just after test one.\\n\\nBy now we have described the TDD, there are some rules to take into consideration:\\n- Rule one:     We don\'t write production code before we\'ve written a failing test.\\n- Rule two:     We don\'t write additional tests than sufficient to implement our first scenario of a use case.\\n-  Rule three:   We don\'t write more production code than needed to pass the currently failing test.\\n    \\nAs the TDD is relatively becoming a mature discipline, it started encouraging further innovations derived from it, such as BDD\\nwhose main goal is to get developers, testers, and people from the business to talk to each other. In other words \\n> the real intent is to try and work out what your customer or business wants from the software before you start working on it\\n\\nOnce we adopt the TDD and start working this way with testing side by side with production code, we\'ll write many tests\\nper use case or (feature), and more by component and you can imagine the numbers of lines we\'ll end up with,\\nmanaging tests code became as important as production one. I encourage you to keep tests clean.\\n__what makes a test clean__? Readability, shortness, and expressive. The following snippet shows an example of a test written\\nwith the intention to make it clean, but surely the is no perfect example to follow, just keep in mind to give your test code your attention.\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    // given a booking id\\n    BookingId bookingId = \\"48e58688-adc2-4e3d-be9d-f5129723b351\\";\\n\\n    // when\\n    Either<AcceptBookingError, BookingResponse> either = acceptBookingUseCase\\n                                                          .accept(bookingId);\\n\\n    // then\\n    assertThat(either.get().getStatus()).isEqualTo(BookingStatus.ACCEPTED);\\n  }\\n```\\nThere is another concept that makes our tests more readable, convenient, and easier to maintain, **Domain-Specific Testing Language**\\nThe idea is to create a set of functions and utilities to hide the details of the implementation of your test, the example above we can write\\nit this way\\n```java\\n@Test\\n  public void testAcceptBooking() {\\n    giving()\\n        ._a_bookinId()\\n    .when()\\n        .we_accept_a_booking()\\n    .then()\\n        .the_booking_should_has_accepted_status();\\n  }\\n```\\n\\nAs described by __Robert Martin__ in his book __Clean Code__ a clean test follow other rules that form the F.I.R.S.T acronym\\n\\n    - Fast: Tests shoud be fast\\n    - Independent: Tests should not depend on each other\\n    - Repeatable: Tests should be repeatable in any environment\\n    - Self-Validating: The tests should have a boolean output\\n    - Timely: Tests should be written before production code.\\n    \\nFinally, we want to think about tests as the compass to reach our destination which is the final secure, viable, and high-quality product we build.\\n\\n----\\n* [Martin Fowler\'s blog](https://martinfowler.com/testing/)\\n* [Clean Code Book by Robert C.Martin](https://www.pearson.com/us/higher-education/program/Martin-Clean-Code-A-Handbook-of-Agile-Software-Craftsmanship/PGM63937.html)\\n* [Cucumber Blog](https://cucumber.io/blog/bdd/intro-to-bdd-and-tdd/)\\n* [Agile Alliance](https://www.agilealliance.org/glossary/tdd/)"},{"id":"mentoring-a-new-junior-teammate-from-day1-to","metadata":{"permalink":"/blog/mentoring-a-new-junior-teammate-from-day1-to","source":"@site/blog/2020-09-01-mentoring-a-new-junior-teammate-from-day1-to.mdx","title":"Mentoring a new junior teammate from day 1 to","description":"author","date":"2020-09-01T07:56:31.000Z","tags":[{"inline":true,"label":"team","permalink":"/blog/tags/team"},{"inline":true,"label":"collaboration","permalink":"/blog/tags/collaboration"},{"inline":true,"label":"share","permalink":"/blog/tags/share"}],"readingTime":6.42,"hasTruncateMarker":false,"authors":[{"name":"Reda Jaifar","title":"Lead Developer","url":"https://github.com/reda-jaifar","imageURL":"https://avatars.githubusercontent.com/u/10919693?s=400&u=b30e8e86baebe277b11a4117560d601fd34bd245&v=4","key":"reda","page":null}],"frontMatter":{"slug":"mentoring-a-new-junior-teammate-from-day1-to","title":"Mentoring a new junior teammate from day 1 to","date":"2020-09-01 07:56:31 +0100","authors":["reda"],"tags":["team","collaboration","share"]},"unlisted":false,"prevItem":{"title":"Software testing from separate activity to core development","permalink":"/blog/software-testing-from-separate-activity-to-core-development\\""}},"content":"![author](/img/blog/mentoring-a-new-junior-teammate-from-day1-to.jpeg)\\n[Photo by Ian Schneider](https://unsplash.com/photos/PAykYb-8Er8)\\n\\n# Teaching in my mind \\nI always love my parents\' job, I grew up in a family of two teachers, later my dad became a school principal. They were\\nsharing every day their experiences, funny situations with students, and emotions. In addition to all this\\n information about teaching, I retain one thing that I feel it\\n > Teaching others is such a satisfying feeling, especially if you can observe their progression along the time\\n\\nthese concepts were carved in my subconscious mind since then. I remember in mid-high school I went to ask about a\\n course in a private school, After introducing my self the principal proposed to me teaching Adobe Photoshop and web\\n  concepts, Without diving into the details of this journey, I do appreciate it.\\n  \\nTime passes and I find myself several times in the shoes of a teacher, the story I share in the next paragraph is\\n quite different from teaching, but has many similarities I wanted to write down.\\n \\n# Mentoring someone, who decided?\\nIn a company, this approach may be part of its culture, So the HR team once they hire a new joiner, they ask a\\n senior who wants to play the role of mentor, certainly this is a voluntary decision and not a hierarchical one, as mentoring requires first of all the initiative and passion to do it.\\n  This is not a work task to complete, this is a\\n   mindset to share with love.\\n   \\nRegardless of having this culture or not, in many cases, a spontaneous relationship between a senior and a new team\\n-member took place, mainly due to their personalities rapprochement. Then we begin to talk about mentoring as the\\n senior introduces his new team-mate to other teams, lets him discover departments, work methods, and any knowledge\\n  that may help him be  well integrated.\\n  \\n# What should we have to succeed in a mentoring program?\\nIn my opinion, we need to behave like coach  and trainee, or like teacher and student. As a mentor, Having this\\n passion for knowledge sharing, feeling so satisfied while seeing others growing up, Being generous when it comes to\\n  advising and guiding are all \\"must-have\\" values we believe in. Regarding skills, we need to be good in\\n   communication, the capacity of thought, and patience.\\n  \\n  On the other side, the trainee needs some skills, or call them behaviors like being good\\n   listener, a hungry man who wants to enrich his knowledge by asking for details, but certainly without disturbing\\n    the mentor, Because this one is meanwhile an employee with tasks and missions to complete, So as a trainee we keep\\n     calm and patient when we don\'t have some information or answers immediately. For the trainee the mentoring\\n      should represent an opportunity to know more, have different points of view, but in any case should impact\\n       our analysis capabilities, and influence our decision-making, we have to protect our autonomous which is\\n        the most valuable goal we target. \\n\\n# Day 1\\nI\'ve been delighted to welcome with my team our new colleague who has just graduated and he is today starting his\\n first job as a software engineer. I took him for a short tour to discover the office, the facilities, and our\\n  beautiful kitchen corner where often we share coffee time.\\nI think the first impression is very important the reason why my team and I gave it all our intention to make it at\\n the same time funny and useful for our team-mate. We wanted to help him feel very comfortable. For today apart\\n  from receiving his laptop and tools no code or pull request.\\n \\n# Day 2 \\nA short introduction to explain the project views, our work methods, and collaboration best practices we believe in\\n within our entity. As a software engineer focusing on technical staff, I suggested putting our junior colleague in\\n  touch with our scrum master for the purpose to learn about agility, how we use SCRUM as a reference with all its\\n   rituals from daily stand up to sprint retrospective.\\n   \\nNow it\'s coffee time, a good moment to show him an important value within our company, generosity especially when it\\n comes to knowledge, we believe that sharing is such a powerful value that helps all of up to grow up together and\\n  progress whatever our field of expertise. Although everyone has a clear and well-defined role within the team, being\\n  aware of what others are doing is crucial cope with any absence or unavailability.\\n\\n# Day 3\\nOur new colleague is very motivated and curious, his questions are dept and constructive, but unfortunately, I could\\n not answer all of them immediately, I let him know that he can also email me and I\'ll answer him later once I finish\\n  a prioritized task. The lesson here is very simple, a question may be answered later but should never end up\\n   without any response. To avoid any confusion or lack of trust that may affect my relationship with my junior\\n    colleague. \\n   \\n# Day 4\\nCollaboration over delegation is what happens when we have less time to explain or teach someone else how to complete\\na task or do a job, but this approach is too bad. As a mentor, I prefer to collaborate with trainees walking together\\nside by side armed with passion and patience with one goal: helping him being autonomous instead of completing tasks\\nfor him quickly no matter how much time will take, training others is always a pleasure and a must-have for a mentor.\\nA mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n> A mentor should walk side by side with a trainee helping being autonomous instead of completing tasks for him quickly\\n    \\n# Day 5\\nAre you a good listener? I was convinced as a mentor I need to listen a lot to my trainee, give him all the time to \\nexplain his point of view or vision even though I\'m not okay with or I\'m not sure he is not on the right way, keep calm\\nand let him finish, I see many colleagues when a junior comes with a new idea, or an initiative, they quickly try \\nto crop believing that is it a wast time, Unfortunately, this behavior may dramatically degrade a junior\u2019s \\nself-confidence and his motivation for future initiatives.\\n   \\n#  Next Day\\nThe days go by one after the other and I\u2019m getting so happy to see our team growing up and how our new junior colleague\\nis taking over subjects and becoming autonomous, This trusted and honest relationship we built together is bringing\\nwhat is expected to be. I do believe that mentoring someone else is nothing other than giving him the right \\nand the necessary tools to dive alone with confidence into any subject. This friendly relationship helps us learn\\nfrom each other, I do appreciate supporting my colleague during his first days within our team and in the company.\\nHis questions, exchanges, and remarks let me learn how to communicate and explain my ideas and point of view at a \\nlow level using simple and easy expressions to understand when talking to a debutant person or someone outside of \\nmy field of expertise.\\n   \\n# It\'s been a constructive journey\\nAlong the way, I learned a lot of things and values I would like to summarize below:\\n\\n    * Stay humble when you talk to junior or debutant people.\\n    * There is always something to learn from others whatever their expertise level.\\n    * Share and publish your knowledge to help serve and improve yourself and others.\\n    * Gain respect and recognition\\n    \\n*publish, share, exchange to help serve, shape and improve the world*"}]}}')}}]);